{"version":3,"sources":["actions/index.js","components/StartMenu.js","components/NextQuestion.js","components/QuestionDisplay.js","App.js","reducers/index.js","index.js"],"names":["fetchQuestions","dispatch","getState","a","axios","get","response","type","payload","data","results","connect","state","gameOver","updateState","questions","questionReducer","score","startGame","className","length","onClick","questionIndex","nextQuestion","endGame","resetSelect","onNextSelect","buttons","document","getElementsByTagName","i","classList","contains","remove","QuestionDisplay","checkAnswer","event","props","onCorrect","onChoiceSelect","choices","getElementsByClassName","buttonIndex","target","textContent","answerIndex","answer","add","this","map","choice","index","dangerouslySetInnerHTML","__html","select","question","renderChoices","Component","App","start","initialQuestionState","initialState","combineReducers","action","formattedQuestions","answerChoices","incorrect_answers","Math","floor","random","splice","correct_answer","forEach","push","store","createStore","reducers","applyMiddleware","thunk","ReactDOM","render","querySelector"],"mappings":"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","file":"static/js/main.dac23490.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport const fetchQuestions = () => async(dispatch, getState) => {\n    const response = await axios.get('https://opentdb.com/api.php?amount=10&category=9&type=multiple');\n    dispatch({ type: 'FETCH_QUESTIONS', payload: response.data.results });\n}\n\nexport const startGame = () => {\n\treturn {\n\t\ttype: 'START_GAME'\n\t};\n};\n\nexport const endGame = () => {\n\treturn {\n\t\ttype: 'GAME_OVER'\n\t};\n};\n\nexport const onChoiceSelect = () => {\n\treturn {\n\t\ttype: 'CHOICE_SELECTED'\n\t};\n};\n\n\nexport const resetSelect = () => {\n\treturn {\n\t\ttype: 'RESET_SELECT'\n\t};\n};\n\nexport const nextQuestion = () => {\n\treturn {\n\t\ttype: 'NEXT_QUESTION'\n\t};\n};\n\nexport const onCorrect = () => {\n\treturn {\n\t\ttype: 'INCREMENT_SCORE'\n\t};\n};","import React from 'react';\nimport { connect } from 'react-redux';\nimport { startGame } from '../actions';\n\nconst StartMenu = ({score, questions, startGame, gameOver}) => {\n\n//if gameOver is true display user's score and give them the option to restart the game\n//if false display the initial main menu with title and option to start the game\n\treturn (\n\t\tgameOver ? \n\t\t\t<div className=\"menu-end\">\n\t\t\t\t<div className=\"score\">\n\t\t\t\t\t<h2>You scored {score}/{questions.length}</h2>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"restart\">\n\t\t\t\t\t<button onClick={startGame}>Play Again?</button>\n\t\t\t\t</div>\n\t\t\t</div> :\n\t\t\t<div className=\"menu\">\n\t\t\t\t<div className=\"heading\">\n\t\t\t\t\t<h1>General Knowledge Trivia</h1>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"start\">\n\t\t\t\t\t<button onClick={startGame}>Start</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t);\n};\n\nconst mapStateToProps = state => {\n\treturn {\n\t\tgameOver: state.updateState.gameOver,\n\t\tquestions: state.questionReducer.questions,\n\t\tscore: state.updateState.score\n\t}\n}\n\n\nexport default connect(mapStateToProps, {startGame})(StartMenu);","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { nextQuestion, endGame, resetSelect, fetchQuestions } from '../actions';\n\nconst NextQuestion = ({nextQuestion, endGame, fetchQuestions, resetSelect, questionIndex, questions}) => {\n\n\t//increment questionIndex, removing selected choice classes, and resetting select piece of state\n\t//if final quetsion - fetch new questions and call endGame action creator in order to set state to handle end of game\n\tconst onNextSelect = () => {\n\t\tnextQuestion();\n\t\tconst buttons = document.getElementsByTagName('button');\n\t\tfor (let i = 0; i < buttons.length; i++) {\n\t\t\tif (buttons[i].classList.contains('choice-correct')) {\n\t\t\t\tbuttons[i].classList.remove('choice-correct')\n\t\t\t} else if (buttons[i].classList.contains('choice-incorrect')) {\n\t\t\t\tbuttons[i].classList.remove('choice-incorrect')\n\t\t\t}\n\t\t}\n\t\tif (questionIndex < questions.length - 1) {\n\t\t\tresetSelect();\n\t\t} else {\n\t\t\tfetchQuestions();\n\t\t\tendGame();\n\t\t}\n\t}\n\n\t//display the next button after user selects an answer\n\t//if on last question, button will display with text of 'finish' rather than 'next question'\n\treturn (\n\t\tquestionIndex === questions.length - 1 ? \n\t\t\t<button onClick={onNextSelect}>Finish</button> :\n\t\t\t<button onClick={onNextSelect} >\n\t\t\t\tNext Question\n\t\t\t</button> \n\n\t);\n}\n\nconst mapStateToProps = state => {\n\treturn {\n\t\tquestionIndex: state.updateState.questionIndex,\n\t\tquestions: state.questionReducer.questions,\n\t}\n}\n\nexport default connect(mapStateToProps, {nextQuestion, endGame, fetchQuestions, resetSelect})(NextQuestion);\n\n\n","import React, {Component} from 'react';\nimport { connect } from 'react-redux';\nimport { onChoiceSelect, onCorrect } from '../actions';\n\nimport NextQuestion from './NextQuestion';\nimport '../style/App.scss';\n\nclass QuestionDisplay extends Component {\n\n\t//onClick event handler from the choice buttons\n\tcheckAnswer = event => {\n\t\tconst { questions, questionIndex, onCorrect, onChoiceSelect } = this.props;\n\t\t//looping over answer choices to find the index of user's selected answer in the choices array\n\t\tconst choices = document.getElementsByClassName('choice');\n\t\tlet buttonIndex = 0;\n\t\tfor (let i = 0; i < choices.length; i++) {\n\t\t\tif (event.target.textContent === choices[i].textContent) {\n\t\t\t\tbuttonIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t//grabbing value of answer property on the questions array which equls the index of the correct answer on the choices array\n\t\tconst answerIndex = questions[questionIndex].answer;\n\t\t//check if user's answer equals correct answer - if so increment score with onCorrect action creator and disply button as correct\n\t\tif (event.target.textContent === questions[questionIndex].choices[answerIndex]) {\n\t\t\tchoices[answerIndex].classList.add(\"choice-correct\");\n\t\t\tonCorrect();\n\t\t}\n\t\t//if user's answer is incorrect use buttonIndex value to display chosen button as incorrect and answerIndex to display the correct answer button\n\t\telse {\n\t\t\tchoices[buttonIndex].classList.add(\"choice-incorrect\");\n\t\t\tchoices[answerIndex].classList.add(\"choice-correct\");\n\t\t}\n\t\tonChoiceSelect();\n\t}\n\n\t//mapping over the choices array to create a button for each choice to display on the screen\n\trenderChoices() {\n\t\tconst { questions, questionIndex } = this.props;\n\t\tconst choices = questions[questionIndex].choices.map((choice, index) => {\n\t\t\treturn (\n\t\t\t\t<button\n\t\t\t\t\tdangerouslySetInnerHTML={{__html: choice}}\n\t\t\t\t\tclassName=\"choice\"\n\t\t\t\t\tkey={index}\n\t\t\t\t\tonClick={this.checkAnswer}\n\t\t\t\t>\n\t\t\t\t</button>\n\t\t\t);\n\t\t})\n\t\treturn choices;\n\t}\n\n\trender() {\n\t\tconst { questions, questionIndex, select } = this.props;\n\t\treturn (\n\t\t\t<div className=\"container\">\n\t\t\t\t<strong>Question: {questionIndex + 1} of {questions.length}</strong>\n\t\t\t\t<div className=\"question-display\">\n\t\t\t\t\t<div className=\"question-text\">\n\t\t\t\t\t\t<h1 dangerouslySetInnerHTML={{__html:questions[questionIndex].question}}></h1>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"choice-wrapper\">\n\t\t\t\t\t\t{this.renderChoices()}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"next\">\n\t\t\t\t\t{select ? <NextQuestion  /> : ''}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nconst mapStateToProps = state => {\n\treturn {\n\t\tquestionIndex: state.updateState.questionIndex,\n\t\tquestions: state.questionReducer.questions,\n\t\tselect: state.updateState.select\n\t};\n};\n\nexport default connect(mapStateToProps, {onChoiceSelect, onCorrect })(QuestionDisplay);\n\n\n\n\n\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport StartMenu from './components/StartMenu';\nimport QuestionDisplay from './components/QuestionDisplay';\nimport { fetchQuestions } from './actions';\n\nclass App extends Component {\n\n\tcomponentDidMount() {\n\t\tthis.props.fetchQuestions();\n\t}\n\n\trender() {\n\t\tconst { start } = this.props;\n\t\treturn (\n\t\t\tstart ? <QuestionDisplay /> : \n\t\t\t\t\t\t\t<StartMenu />\n\t\t);\n\t}\n}\n\nconst mapStateToProps = state => {\n\treturn { \n\t\tstart: state.updateState.start \n\t}\n}\n\nexport default connect(mapStateToProps, { fetchQuestions })(App);\n\n\n\n\n","import { combineReducers } from 'redux';\n\nconst initialQuestionState = {\n    questions: []\n};\n\n//reformatting the fetched data in and setting equal to questions piece of state\n//data will be an array of objects - each object is a single question\n//objects will have a question property with the question text, choices property which is an array of choices\n//and answer property which is the index of the correct answer in the array of choices\nconst questionReducer = (state=initialQuestionState, action) => {\n    switch(action.type) {\n        case 'FETCH_QUESTIONS':\n            const questions = action.payload.map((question) => {\n                const formattedQuestions = {\n                    question: question.question\n                }\n                const answerChoices = [...question.incorrect_answers];\n                formattedQuestions.answer = Math.floor(Math.random() * 3);\n                answerChoices.splice(formattedQuestions.answer, 0, question.correct_answer);\n                formattedQuestions.choices = [];\n                answerChoices.forEach((choice, index) => {\n                    formattedQuestions.choices.push(choice);\n                })\n                return formattedQuestions;\n            });\n            return {...state, questions: questions};\n        default:\n            return state;\n    };\n};\n\nconst initialState = {\n    start: false,\n    gameOver: false,\n    select: false,\n    questionIndex: 0,\n    score: 0\n}\n\nconst updateState = (state=initialState, action) => {\n    switch(action.type) {\n        case 'START_GAME':\n            return { ...state, start: true }\n        case 'GAME_OVER':\n            return {...state, gameOver: true, start: false, select: false, questionIndex: 0 }\n        case 'CHOICE_SELECTED':\n            return {...state, select: true };\n        case 'RESET_SELECT':\n            return { ...state, select: false };\n        case 'NEXT_QUESTION':\n            return {...state, questionIndex: state.questionIndex + 1 };\n        case 'INCREMENT_SCORE':\n            return {...state, score: state.score + 1 };\n        default: \n            return state;\n    }\n}\n\n\n\nexport default combineReducers({\n    questionReducer, \n    updateState\n});\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport App from './App';\nimport reducers from './reducers';\n\nconst store = createStore(reducers, applyMiddleware(thunk));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, \n    document.querySelector('#root'));"],"sourceRoot":""}