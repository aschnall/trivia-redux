{"ast":null,"code":"import{jsx as _jsx}from\"react/jsx-runtime\";import React from'react';import{connect}from'react-redux';import{nextQuestion,endGame,resetSelect,fetchQuestions}from'../actions';var NextQuestion=function NextQuestion(_ref){var nextQuestion=_ref.nextQuestion,endGame=_ref.endGame,fetchQuestions=_ref.fetchQuestions,resetSelect=_ref.resetSelect,questionIndex=_ref.questionIndex,questions=_ref.questions;//increment questionIndex, removing selected choice classes, and resetting select piece of state\n//if final quetsion - fetch new questions and call endGame action creator in order to set state to handle end of game\nvar onNextSelect=function onNextSelect(){nextQuestion();var buttons=document.getElementsByTagName('button');for(var i=0;i<buttons.length;i++){if(buttons[i].classList.contains('choice-correct')){buttons[i].classList.remove('choice-correct');}else if(buttons[i].classList.contains('choice-incorrect')){buttons[i].classList.remove('choice-incorrect');}}if(questionIndex<questions.length-1){resetSelect();}else{fetchQuestions();endGame();}};//display the next button after user selects an answer\n//if on last question, button will display with text of 'finish' rather than 'next question'\nreturn questionIndex===questions.length-1?/*#__PURE__*/_jsx(\"button\",{onClick:onNextSelect,children:\"Finish\"}):/*#__PURE__*/_jsx(\"button\",{onClick:onNextSelect,children:\"Next Question\"});};var mapStateToProps=function mapStateToProps(state){return{questionIndex:state.updateState.questionIndex,questions:state.questionReducer.questions};};export default connect(mapStateToProps,{nextQuestion:nextQuestion,endGame:endGame,fetchQuestions:fetchQuestions,resetSelect:resetSelect})(NextQuestion);","map":{"version":3,"sources":["/Users/aschnall/Documents/Portfolio/trivia-redux-edit/trivia-redux/src/components/NextQuestion.js"],"names":["React","connect","nextQuestion","endGame","resetSelect","fetchQuestions","NextQuestion","questionIndex","questions","onNextSelect","buttons","document","getElementsByTagName","i","length","classList","contains","remove","mapStateToProps","state","updateState","questionReducer"],"mappings":"2CAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,OAAT,KAAwB,aAAxB,CAEA,OAASC,YAAT,CAAuBC,OAAvB,CAAgCC,WAAhC,CAA6CC,cAA7C,KAAmE,YAAnE,CAEA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,MAAoF,IAAlFJ,CAAAA,YAAkF,MAAlFA,YAAkF,CAApEC,OAAoE,MAApEA,OAAoE,CAA3DE,cAA2D,MAA3DA,cAA2D,CAA3CD,WAA2C,MAA3CA,WAA2C,CAA9BG,aAA8B,MAA9BA,aAA8B,CAAfC,SAAe,MAAfA,SAAe,CAExG;AACA;AACA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,EAAM,CAC1BP,YAAY,GACZ,GAAMQ,CAAAA,OAAO,CAAGC,QAAQ,CAACC,oBAAT,CAA8B,QAA9B,CAAhB,CACA,IAAK,GAAIC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGH,OAAO,CAACI,MAA5B,CAAoCD,CAAC,EAArC,CAAyC,CACxC,GAAIH,OAAO,CAACG,CAAD,CAAP,CAAWE,SAAX,CAAqBC,QAArB,CAA8B,gBAA9B,CAAJ,CAAqD,CACpDN,OAAO,CAACG,CAAD,CAAP,CAAWE,SAAX,CAAqBE,MAArB,CAA4B,gBAA5B,EACA,CAFD,IAEO,IAAIP,OAAO,CAACG,CAAD,CAAP,CAAWE,SAAX,CAAqBC,QAArB,CAA8B,kBAA9B,CAAJ,CAAuD,CAC7DN,OAAO,CAACG,CAAD,CAAP,CAAWE,SAAX,CAAqBE,MAArB,CAA4B,kBAA5B,EACA,CACD,CACD,GAAIV,aAAa,CAAGC,SAAS,CAACM,MAAV,CAAmB,CAAvC,CAA0C,CACzCV,WAAW,GACX,CAFD,IAEO,CACNC,cAAc,GACdF,OAAO,GACP,CACD,CAhBD,CAkBA;AACA;AACA,MACCI,CAAAA,aAAa,GAAKC,SAAS,CAACM,MAAV,CAAmB,CAArC,cACC,eAAQ,OAAO,CAAEL,YAAjB,oBADD,cAEC,eAAQ,OAAO,CAAEA,YAAjB,2BAHF,CAQA,CAhCD,CAkCA,GAAMS,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAAAC,KAAK,CAAI,CAChC,MAAO,CACNZ,aAAa,CAAEY,KAAK,CAACC,WAAN,CAAkBb,aAD3B,CAENC,SAAS,CAAEW,KAAK,CAACE,eAAN,CAAsBb,SAF3B,CAAP,CAIA,CALD,CAOA,cAAeP,CAAAA,OAAO,CAACiB,eAAD,CAAkB,CAAChB,YAAY,CAAZA,YAAD,CAAeC,OAAO,CAAPA,OAAf,CAAwBE,cAAc,CAAdA,cAAxB,CAAwCD,WAAW,CAAXA,WAAxC,CAAlB,CAAP,CAA+EE,YAA/E,CAAf","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { nextQuestion, endGame, resetSelect, fetchQuestions } from '../actions';\n\nconst NextQuestion = ({nextQuestion, endGame, fetchQuestions, resetSelect, questionIndex, questions}) => {\n\n\t//increment questionIndex, removing selected choice classes, and resetting select piece of state\n\t//if final quetsion - fetch new questions and call endGame action creator in order to set state to handle end of game\n\tconst onNextSelect = () => {\n\t\tnextQuestion();\n\t\tconst buttons = document.getElementsByTagName('button');\n\t\tfor (let i = 0; i < buttons.length; i++) {\n\t\t\tif (buttons[i].classList.contains('choice-correct')) {\n\t\t\t\tbuttons[i].classList.remove('choice-correct')\n\t\t\t} else if (buttons[i].classList.contains('choice-incorrect')) {\n\t\t\t\tbuttons[i].classList.remove('choice-incorrect')\n\t\t\t}\n\t\t}\n\t\tif (questionIndex < questions.length - 1) {\n\t\t\tresetSelect();\n\t\t} else {\n\t\t\tfetchQuestions();\n\t\t\tendGame();\n\t\t}\n\t}\n\n\t//display the next button after user selects an answer\n\t//if on last question, button will display with text of 'finish' rather than 'next question'\n\treturn (\n\t\tquestionIndex === questions.length - 1 ? \n\t\t\t<button onClick={onNextSelect}>Finish</button> :\n\t\t\t<button onClick={onNextSelect} >\n\t\t\t\tNext Question\n\t\t\t</button> \n\n\t);\n}\n\nconst mapStateToProps = state => {\n\treturn {\n\t\tquestionIndex: state.updateState.questionIndex,\n\t\tquestions: state.questionReducer.questions,\n\t}\n}\n\nexport default connect(mapStateToProps, {nextQuestion, endGame, fetchQuestions, resetSelect})(NextQuestion);\n\n\n"]},"metadata":{},"sourceType":"module"}