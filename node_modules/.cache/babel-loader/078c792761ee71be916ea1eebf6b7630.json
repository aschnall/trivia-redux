{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/aschnall/Documents/Portfolio/trivia-redux-edit/src/components/QuestionDisplay.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { onChoiceSelect, onCorrect } from '../actions';\nimport NextQuestion from './NextQuestion';\nimport '../style/App.scss';\n\nclass QuestionDisplay extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.checkAnswer = event => {\n      const {\n        questions,\n        questionIndex,\n        onCorrect,\n        onChoiceSelect\n      } = this.props; //looping over answer choices to find the index of user's selected answer in the choices array\n\n      const choices = document.getElementsByClassName('choice');\n      let buttonIndex = 0;\n\n      for (let i = 0; i < choices.length; i++) {\n        if (event.target.textContent === choices[i].textContent) {\n          buttonIndex = i;\n          break;\n        }\n      } //grabbing value of answer property on the questions array which equls the index of the correct answer on the choices array\n\n\n      const answerIndex = questions[questionIndex].answer; //check if user's answer equals correct answer - if so increment score with onCorrect action creator\n\n      if (event.target.textContent === questions[questionIndex].choices[answerIndex]) {\n        choices[answerIndex].classList.add(\"choice-correct\");\n        onCorrect();\n      } //if user's answer is incorrect use buttonIndex value to display it as incorrect and answerIndex to display the correct answer\n      else {\n          choices[buttonIndex].classList.add(\"choice-incorrect\");\n          choices[answerIndex].classList.add(\"choice-correct\");\n        }\n\n      onChoiceSelect();\n    };\n  }\n\n  //mapping over the choices array to create a button for each choice to display on the screen\n  renderChoices() {\n    const {\n      questions,\n      questionIndex\n    } = this.props;\n    const choices = questions[questionIndex].choices.map((choice, index) => {\n      return /*#__PURE__*/_jsxDEV(\"button\", {\n        dangerouslySetInnerHTML: {\n          __html: choice\n        },\n        className: \"choice\",\n        onClick: this.checkAnswer\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 5\n      }, this);\n    });\n    return choices;\n  }\n\n  render() {\n    const {\n      questions,\n      questionIndex,\n      select\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: [\"Question: \", questionIndex + 1, \" of \", questions.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question-display\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"question-text\",\n          children: /*#__PURE__*/_jsxDEV(\"h1\", {\n            dangerouslySetInnerHTML: {\n              __html: questions[questionIndex].question\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"choice-wrapper\",\n          children: this.renderChoices()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"next\",\n        children: select ? /*#__PURE__*/_jsxDEV(NextQuestion, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 16\n        }, this) : ''\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 4\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    questionIndex: state.updateState.questionIndex,\n    questions: state.questionReducer.questions,\n    select: state.updateState.select\n  };\n};\n\nexport default connect(mapStateToProps, {\n  onChoiceSelect,\n  onCorrect\n})(QuestionDisplay);","map":{"version":3,"sources":["/Users/aschnall/Documents/Portfolio/trivia-redux-edit/src/components/QuestionDisplay.js"],"names":["React","Component","connect","onChoiceSelect","onCorrect","NextQuestion","QuestionDisplay","checkAnswer","event","questions","questionIndex","props","choices","document","getElementsByClassName","buttonIndex","i","length","target","textContent","answerIndex","answer","classList","add","renderChoices","map","choice","index","__html","render","select","question","mapStateToProps","state","updateState","questionReducer"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport { connect } from 'react-redux';\nimport { onChoiceSelect, onCorrect } from '../actions';\n\nimport NextQuestion from './NextQuestion';\nimport '../style/App.scss';\n\nclass QuestionDisplay extends Component {\n\n\t//onClick event handler from the choice buttons\n\tcheckAnswer = event => {\n\t\tconst { questions, questionIndex, onCorrect, onChoiceSelect } = this.props;\n\t\t//looping over answer choices to find the index of user's selected answer in the choices array\n\t\tconst choices = document.getElementsByClassName('choice');\n\t\tlet buttonIndex = 0;\n\t\tfor (let i = 0; i < choices.length; i++) {\n\t\t\tif (event.target.textContent === choices[i].textContent) {\n\t\t\t\tbuttonIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t//grabbing value of answer property on the questions array which equls the index of the correct answer on the choices array\n\t\tconst answerIndex = questions[questionIndex].answer;\n\t\t//check if user's answer equals correct answer - if so increment score with onCorrect action creator\n\t\tif (event.target.textContent === questions[questionIndex].choices[answerIndex]) {\n\t\t\tchoices[answerIndex].classList.add(\"choice-correct\");\n\t\t\tonCorrect();\n\t\t}\n\t\t\t\t//if user's answer is incorrect use buttonIndex value to display it as incorrect and answerIndex to display the correct answer\n\t\telse {\n\t\t\tchoices[buttonIndex].classList.add(\"choice-incorrect\");\n\t\t\tchoices[answerIndex].classList.add(\"choice-correct\");\n\t\t}\n\t\tonChoiceSelect();\n\t}\n\n\t//mapping over the choices array to create a button for each choice to display on the screen\n\trenderChoices() {\n\t\tconst { questions, questionIndex } = this.props;\n\t\tconst choices = questions[questionIndex].choices.map((choice, index) => {\n\t\t\treturn (\n\t\t\t\t<button\n\t\t\t\t\tdangerouslySetInnerHTML={{__html: choice}}\n\t\t\t\t\tclassName=\"choice\"\n\t\t\t\t\tkey={index}\n\t\t\t\t\tonClick={this.checkAnswer}\n\t\t\t\t>\n\t\t\t\t</button>\n\t\t\t);\n\t\t})\n\t\treturn choices;\n\t}\n\n\trender() {\n\t\tconst { questions, questionIndex, select } = this.props;\n\t\treturn (\n\t\t\t<div className=\"container\">\n\t\t\t\t<strong>Question: {questionIndex + 1} of {questions.length}</strong>\n\t\t\t\t<div className=\"question-display\">\n\t\t\t\t\t<div className=\"question-text\">\n\t\t\t\t\t\t<h1 dangerouslySetInnerHTML={{__html:questions[questionIndex].question}}></h1>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"choice-wrapper\">\n\t\t\t\t\t\t{this.renderChoices()}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"next\">\n\t\t\t\t\t{select ? <NextQuestion  /> : ''}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nconst mapStateToProps = state => {\n\treturn {\n\t\tquestionIndex: state.updateState.questionIndex,\n\t\tquestions: state.questionReducer.questions,\n\t\tselect: state.updateState.select\n\t};\n};\n\nexport default connect(mapStateToProps, {onChoiceSelect, onCorrect })(QuestionDisplay);\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}