{"ast":null,"code":"import { combineReducers } from 'redux';\n\nconst questionReducer = (state = [], action) => {\n  switch (action.type) {\n    case 'FETCH_QUESTIONS':\n      return action.payload.map(question => {\n        const formattedQuestions = {\n          question: question.question\n        };\n        const answerChoices = [...question.incorrect_answers];\n        formattedQuestions.answer = Math.floor(Math.random() * 3) + 1;\n        answerChoices.splice(formattedQuestions.answer - 1, 0, question.correct_answer);\n        formattedQuestions.choices = [];\n        answerChoices.forEach((choice, index) => {\n          formattedQuestions.choices[`choice${index + 1}`] = choice;\n        });\n        return formattedQuestions;\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default combineReducers({\n  questionReducer\n});","map":{"version":3,"sources":["/Users/aschnall/Documents/Portfolio/trivia/src/reducers/index.js"],"names":["combineReducers","questionReducer","state","action","type","payload","map","question","formattedQuestions","answerChoices","incorrect_answers","answer","Math","floor","random","splice","correct_answer","choices","forEach","choice","index"],"mappings":"AAAA,SAASA,eAAT,QAAgC,OAAhC;;AAEA,MAAMC,eAAe,GAAG,CAACC,KAAK,GAAC,EAAP,EAAWC,MAAX,KAAsB;AAC1C,UAAOA,MAAM,CAACC,IAAd;AACI,SAAK,iBAAL;AACI,aAAOD,MAAM,CAACE,OAAP,CAAeC,GAAf,CAAoBC,QAAD,IAAc;AACpC,cAAMC,kBAAkB,GAAG;AACvBD,UAAAA,QAAQ,EAAEA,QAAQ,CAACA;AADI,SAA3B;AAGA,cAAME,aAAa,GAAG,CAAC,GAAGF,QAAQ,CAACG,iBAAb,CAAtB;AACAF,QAAAA,kBAAkB,CAACG,MAAnB,GAA4BC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,CAA3B,IAAgC,CAA5D;AACAL,QAAAA,aAAa,CAACM,MAAd,CAAqBP,kBAAkB,CAACG,MAAnB,GAA4B,CAAjD,EAAoD,CAApD,EAAuDJ,QAAQ,CAACS,cAAhE;AACAR,QAAAA,kBAAkB,CAACS,OAAnB,GAA6B,EAA7B;AACAR,QAAAA,aAAa,CAACS,OAAd,CAAsB,CAACC,MAAD,EAASC,KAAT,KAAmB;AACrCZ,UAAAA,kBAAkB,CAACS,OAAnB,CAA4B,SAAQG,KAAK,GAAC,CAAE,EAA5C,IAAiDD,MAAjD;AACH,SAFD;AAGA,eAAOX,kBAAP;AACH,OAZM,CAAP;;AAaJ;AACI,aAAON,KAAP;AAhBR;AAkBH,CAnBD;;AAqBA,eAAeF,eAAe,CAAC;AAACC,EAAAA;AAAD,CAAD,CAA9B","sourcesContent":["import { combineReducers } from 'redux';\n\nconst questionReducer = (state=[], action) => {\n    switch(action.type) {\n        case 'FETCH_QUESTIONS':\n            return action.payload.map((question) => {\n                const formattedQuestions = {\n                    question: question.question\n                }\n                const answerChoices = [...question.incorrect_answers];\n                formattedQuestions.answer = Math.floor(Math.random() * 3) + 1;\n                answerChoices.splice(formattedQuestions.answer - 1, 0, question.correct_answer);\n                formattedQuestions.choices = [];\n                answerChoices.forEach((choice, index) => {\n                    formattedQuestions.choices[`choice${index+1}`] = choice;\n                })\n                return formattedQuestions;\n            });\n        default:\n            return state;\n    }\n};\n\nexport default combineReducers({questionReducer});"]},"metadata":{},"sourceType":"module"}