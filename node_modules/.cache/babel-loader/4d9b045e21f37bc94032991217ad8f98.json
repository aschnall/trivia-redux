{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/aschnall/Documents/Portfolio/trivia-redux-edit/src/App.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport StartMenu from './components/StartMenu';\nimport QuestionDisplay from './components/QuestionDisplay';\nimport { fetchQuestions } from './actions';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      select: false,\n      questionIndex: 0,\n      score: 0\n    };\n\n    this.nextQuestion = () => {\n      this.setState({\n        questionIndex: this.state.questionIndex + 1\n      });\n      const buttons = document.getElementsByTagName('button');\n\n      for (let i = 0; i < buttons.length; i++) {\n        if (buttons[i].classList.contains('choice-correct')) {\n          buttons[i].classList.remove('choice-correct');\n        } else if (buttons[i].classList.contains('choice-incorrect')) {\n          buttons[i].classList.remove('choice-incorrect');\n        }\n      }\n\n      if (this.state.questionIndex < this.props.questions.length - 1) {\n        this.setState({\n          select: false\n        });\n      } else {\n        this.props.fetchQuestions();\n        this.setState({\n          // start: false,\n          select: false,\n          questionIndex: 0\n        });\n      }\n    };\n\n    this.incrementScore = () => {\n      this.setState({\n        score: this.state.score + 1\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.props.fetchQuestions();\n  } // setting up the next question - if last quetsion has been reached reset the game\n\n\n  render() {\n    const {\n      select,\n      questionIndex,\n      gameOver,\n      score\n    } = this.state;\n    const {\n      questions,\n      start\n    } = this.props;\n    return start ? /*#__PURE__*/_jsxDEV(QuestionDisplay, {\n      next: this.nextQuestion,\n      select: select,\n      onCorrect: this.incrementScore,\n      questionIndex: questionIndex,\n      length: questions.length,\n      onAnswerSelect: this.onAnswerSelect\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 12\n    }, this) : /*#__PURE__*/_jsxDEV(StartMenu, {\n      score: score,\n      total: questions.length // fetch={fetchQuestions}\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 8\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    questions: state.questionReducer.questions,\n    start: state.startReducer.start\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchQuestions\n})(App);","map":{"version":3,"sources":["/Users/aschnall/Documents/Portfolio/trivia-redux-edit/src/App.js"],"names":["React","Component","connect","StartMenu","QuestionDisplay","fetchQuestions","App","state","select","questionIndex","score","nextQuestion","setState","buttons","document","getElementsByTagName","i","length","classList","contains","remove","props","questions","incrementScore","componentDidMount","render","gameOver","start","onAnswerSelect","mapStateToProps","questionReducer","startReducer"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport StartMenu from './components/StartMenu';\nimport QuestionDisplay from './components/QuestionDisplay';\nimport {fetchQuestions } from './actions';\n\nclass App extends Component {\n\tstate = {\n\t\tselect: false,\n\t\tquestionIndex: 0,\n\t\tscore: 0\n\t};\n\n\tcomponentDidMount() {\n\t\tthis.props.fetchQuestions();\n}\n\n\n\t// setting up the next question - if last quetsion has been reached reset the game\n\tnextQuestion = () => {\n\t\tthis.setState({questionIndex: this.state.questionIndex + 1});\n\t\tconst buttons = document.getElementsByTagName('button');\n\t\tfor (let i = 0; i < buttons.length; i++) {\n\t\t\tif (buttons[i].classList.contains('choice-correct')) {\n\t\t\t\tbuttons[i].classList.remove('choice-correct')\n\t\t\t} else if (buttons[i].classList.contains('choice-incorrect')) {\n\t\t\t\tbuttons[i].classList.remove('choice-incorrect')\n\t\t\t}\n\t\t}\n\t\tif (this.state.questionIndex < this.props.questions.length - 1) {\n\t\t\tthis.setState({select: false});\n\t\t} else {\n\t\t\tthis.props.fetchQuestions();\n\t\t\tthis.setState({\n\t\t\t\t// start: false,\n\t\t\t\tselect: false,\n\t\t\t\tquestionIndex: 0\n\t\t\t})\n\t\t}\n\t}\n\n\tincrementScore = () => {\n\t\tthis.setState({score: this.state.score + 1});\n\t}\n\n\trender() {\n\t\tconst { select, questionIndex, gameOver, score } = this.state;\n\t\tconst { questions, start } = this.props;\n\t\treturn (\n\t\t\tstart ? <QuestionDisplay \n\t\t\t\t\t\t\t\tnext={this.nextQuestion} \n\t\t\t\t\t\t\t\tselect={select} \n\t\t\t\t\t\t\t\tonCorrect={this.incrementScore}\n\t\t\t\t\t\t\t\tquestionIndex={questionIndex}\n\t\t\t\t\t\t\t\tlength={questions.length}\n\t\t\t\t\t\t\t\tonAnswerSelect={this.onAnswerSelect}\n\t\t\t\t\t\t\t/> : \n\t\t\t\t\t\t\t<StartMenu \n\t\t\t\t\t\t\t\tscore={score}\n\t\t\t\t\t\t\t\ttotal={questions.length}\n\t\t\t\t\t\t\t\t// fetch={fetchQuestions}\n\t\t\t\t\t\t\t/>\n\t\t);\n\t}\n}\n\nconst mapStateToProps = state => {\n\treturn { \n\t\tquestions: state.questionReducer.questions,\n\t\tstart: state.startReducer.start \n\t}\n}\n\nexport default connect(mapStateToProps, {fetchQuestions})(App);\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}