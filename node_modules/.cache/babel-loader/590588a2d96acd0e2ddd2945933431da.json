{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/aschnall/Documents/Portfolio/trivia-redux-edit/src/App.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport StartMenu from './components/StartMenu';\nimport QuestionDisplay from './components/QuestionDisplay';\nimport { fetchQuestions, nextQuestion, resetSelect, endGame } from './actions';\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.fetchQuestions();\n  } // setting up the next question - if last question has been reached reset the game\n  // nextQuestion = () => {\n  // \tthis.props.nextQuestion();\n  // \tconst buttons = document.getElementsByTagName('button');\n  // \tfor (let i = 0; i < buttons.length; i++) {\n  // \t\tif (buttons[i].classList.contains('choice-correct')) {\n  // \t\t\tbuttons[i].classList.remove('choice-correct')\n  // \t\t} else if (buttons[i].classList.contains('choice-incorrect')) {\n  // \t\t\tbuttons[i].classList.remove('choice-incorrect')\n  // \t\t}\n  // \t}\n  // \tif (this.props.questionIndex < this.props.questions.length - 1) {\n  // \t\tthis.props.resetSelect();\n  // \t} else {\n  // \t\tthis.props.fetchQuestions();\n  // \t\tthis.props.endGame();\n  // \t}\n  // }\n\n\n  render() {\n    const {\n      questions,\n      start\n    } = this.props;\n    return start ? /*#__PURE__*/_jsxDEV(QuestionDisplay, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 12\n    }, this) : /*#__PURE__*/_jsxDEV(StartMenu, {\n      total: this.props.questions.length\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 8\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    questions: state.questionReducer.questions,\n    questionIndex: state.updateState.questionIndex,\n    start: state.updateState.start\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchQuestions,\n  nextQuestion,\n  resetSelect,\n  endGame\n})(App);","map":{"version":3,"sources":["/Users/aschnall/Documents/Portfolio/trivia-redux-edit/src/App.js"],"names":["React","Component","connect","StartMenu","QuestionDisplay","fetchQuestions","nextQuestion","resetSelect","endGame","App","componentDidMount","props","render","questions","start","length","mapStateToProps","state","questionReducer","questionIndex","updateState"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,eAAP,MAA4B,8BAA5B;AACA,SAAQC,cAAR,EAAwBC,YAAxB,EAAsCC,WAAtC,EAAmDC,OAAnD,QAAkE,WAAlE;;AAEA,MAAMC,GAAN,SAAkBR,SAAlB,CAA4B;AAE3BS,EAAAA,iBAAiB,GAAG;AACnB,SAAKC,KAAL,CAAWN,cAAX;AACD,GAJ2B,CAM3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGAO,EAAAA,MAAM,GAAG;AACR,UAAM;AAAEC,MAAAA,SAAF;AAAaC,MAAAA;AAAb,QAAuB,KAAKH,KAAlC;AACA,WACCG,KAAK,gBAAG,QAAC,eAAD;AAAA;AAAA;AAAA;AAAA,YAAH,gBACD,QAAC,SAAD;AAAW,MAAA,KAAK,EAAE,KAAKH,KAAL,CAAWE,SAAX,CAAqBE;AAAvC;AAAA;AAAA;AAAA;AAAA,YAFL;AAIA;;AAhC0B;;AAmC5B,MAAMC,eAAe,GAAGC,KAAK,IAAI;AAChC,SAAO;AACNJ,IAAAA,SAAS,EAAEI,KAAK,CAACC,eAAN,CAAsBL,SAD3B;AAENM,IAAAA,aAAa,EAAEF,KAAK,CAACG,WAAN,CAAkBD,aAF3B;AAGNL,IAAAA,KAAK,EAAEG,KAAK,CAACG,WAAN,CAAkBN;AAHnB,GAAP;AAKA,CAND;;AAQA,eAAeZ,OAAO,CAACc,eAAD,EAAkB;AAACX,EAAAA,cAAD;AAAiBC,EAAAA,YAAjB;AAA+BC,EAAAA,WAA/B;AAA4CC,EAAAA;AAA5C,CAAlB,CAAP,CAAgFC,GAAhF,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport StartMenu from './components/StartMenu';\nimport QuestionDisplay from './components/QuestionDisplay';\nimport {fetchQuestions, nextQuestion, resetSelect, endGame } from './actions';\n\nclass App extends Component {\n\n\tcomponentDidMount() {\n\t\tthis.props.fetchQuestions();\n}\n\n\t// setting up the next question - if last question has been reached reset the game\n\t// nextQuestion = () => {\n\t// \tthis.props.nextQuestion();\n\t// \tconst buttons = document.getElementsByTagName('button');\n\t// \tfor (let i = 0; i < buttons.length; i++) {\n\t// \t\tif (buttons[i].classList.contains('choice-correct')) {\n\t// \t\t\tbuttons[i].classList.remove('choice-correct')\n\t// \t\t} else if (buttons[i].classList.contains('choice-incorrect')) {\n\t// \t\t\tbuttons[i].classList.remove('choice-incorrect')\n\t// \t\t}\n\t// \t}\n\t// \tif (this.props.questionIndex < this.props.questions.length - 1) {\n\t// \t\tthis.props.resetSelect();\n\t// \t} else {\n\t// \t\tthis.props.fetchQuestions();\n\t// \t\tthis.props.endGame();\n\t// \t}\n\t// }\n\n\n\trender() {\n\t\tconst { questions, start } = this.props;\n\t\treturn (\n\t\t\tstart ? <QuestionDisplay   /> : \n\t\t\t\t\t\t\t<StartMenu total={this.props.questions.length}/>\n\t\t);\n\t}\n}\n\nconst mapStateToProps = state => {\n\treturn { \n\t\tquestions: state.questionReducer.questions,\n\t\tquestionIndex: state.updateState.questionIndex,\n\t\tstart: state.updateState.start \n\t}\n}\n\nexport default connect(mapStateToProps, {fetchQuestions, nextQuestion, resetSelect, endGame })(App);\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}