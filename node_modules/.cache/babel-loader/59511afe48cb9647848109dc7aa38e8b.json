{"ast":null,"code":"import _objectSpread from\"/Users/aschnall/Documents/Portfolio/trivia-redux-edit/trivia-redux/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _toConsumableArray from\"/Users/aschnall/Documents/Portfolio/trivia-redux-edit/trivia-redux/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import{combineReducers}from'redux';var initialQuestionState={questions:[]};//reformatting the fetched data in and setting equal to questions piece of state\n//data will be an array of objects - each object is a single question\n//objects will have a question property with the question text, choices property which is an array of choices\n//and answer property which is the index of the correct answer in the array of choices\nvar questionReducer=function questionReducer(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initialQuestionState;var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case'FETCH_QUESTIONS':var questions=action.payload.map(function(question){var formattedQuestions={question:question.question};var answerChoices=_toConsumableArray(question.incorrect_answers);formattedQuestions.answer=Math.floor(Math.random()*3);answerChoices.splice(formattedQuestions.answer,0,question.correct_answer);formattedQuestions.choices=[];answerChoices.forEach(function(choice,index){formattedQuestions.choices.push(choice);});return formattedQuestions;});return _objectSpread(_objectSpread({},state),{},{questions:questions});default:return state;};};var initialState={start:false,gameOver:false,select:false,questionIndex:0,score:0};var updateState=function updateState(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initialState;var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case'START_GAME':return _objectSpread(_objectSpread({},state),{},{start:true});case'GAME_OVER':return _objectSpread(_objectSpread({},state),{},{gameOver:true,start:false,select:false,questionIndex:0});case'CHOICE_SELECTED':return _objectSpread(_objectSpread({},state),{},{select:true});case'RESET_SELECT':return _objectSpread(_objectSpread({},state),{},{select:false});case'NEXT_QUESTION':return _objectSpread(_objectSpread({},state),{},{questionIndex:state.questionIndex+1});case'INCREMENT_SCORE':return _objectSpread(_objectSpread({},state),{},{score:state.score+1});default:return state;}};export default combineReducers({questionReducer:questionReducer,updateState:updateState});","map":{"version":3,"sources":["/Users/aschnall/Documents/Portfolio/trivia-redux-edit/trivia-redux/src/reducers/index.js"],"names":["combineReducers","initialQuestionState","questions","questionReducer","state","action","type","payload","map","question","formattedQuestions","answerChoices","incorrect_answers","answer","Math","floor","random","splice","correct_answer","choices","forEach","choice","index","push","initialState","start","gameOver","select","questionIndex","score","updateState"],"mappings":"iTAAA,OAASA,eAAT,KAAgC,OAAhC,CAEA,GAAMC,CAAAA,oBAAoB,CAAG,CACzBC,SAAS,CAAE,EADc,CAA7B,CAIA;AACA;AACA;AACA;AACA,GAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,EAAwC,IAAvCC,CAAAA,KAAuC,2DAAjCH,oBAAiC,IAAXI,CAAAA,MAAW,2CAC5D,OAAOA,MAAM,CAACC,IAAd,EACI,IAAK,iBAAL,CACI,GAAMJ,CAAAA,SAAS,CAAGG,MAAM,CAACE,OAAP,CAAeC,GAAf,CAAmB,SAACC,QAAD,CAAc,CAC/C,GAAMC,CAAAA,kBAAkB,CAAG,CACvBD,QAAQ,CAAEA,QAAQ,CAACA,QADI,CAA3B,CAGA,GAAME,CAAAA,aAAa,oBAAOF,QAAQ,CAACG,iBAAhB,CAAnB,CACAF,kBAAkB,CAACG,MAAnB,CAA4BC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,GAAgB,CAA3B,CAA5B,CACAL,aAAa,CAACM,MAAd,CAAqBP,kBAAkB,CAACG,MAAxC,CAAgD,CAAhD,CAAmDJ,QAAQ,CAACS,cAA5D,EACAR,kBAAkB,CAACS,OAAnB,CAA6B,EAA7B,CACAR,aAAa,CAACS,OAAd,CAAsB,SAACC,MAAD,CAASC,KAAT,CAAmB,CACrCZ,kBAAkB,CAACS,OAAnB,CAA2BI,IAA3B,CAAgCF,MAAhC,EACH,CAFD,EAGA,MAAOX,CAAAA,kBAAP,CACH,CAZiB,CAAlB,CAaA,sCAAWN,KAAX,MAAkBF,SAAS,CAAEA,SAA7B,GACJ,QACI,MAAOE,CAAAA,KAAP,CAjBR,CAkBC,CACJ,CApBD,CAsBA,GAAMoB,CAAAA,YAAY,CAAG,CACjBC,KAAK,CAAE,KADU,CAEjBC,QAAQ,CAAE,KAFO,CAGjBC,MAAM,CAAE,KAHS,CAIjBC,aAAa,CAAE,CAJE,CAKjBC,KAAK,CAAE,CALU,CAArB,CAQA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,EAAgC,IAA/B1B,CAAAA,KAA+B,2DAAzBoB,YAAyB,IAAXnB,CAAAA,MAAW,2CAChD,OAAOA,MAAM,CAACC,IAAd,EACI,IAAK,YAAL,CACI,sCAAYF,KAAZ,MAAmBqB,KAAK,CAAE,IAA1B,GACJ,IAAK,WAAL,CACI,sCAAWrB,KAAX,MAAkBsB,QAAQ,CAAE,IAA5B,CAAkCD,KAAK,CAAE,KAAzC,CAAgDE,MAAM,CAAE,KAAxD,CAA+DC,aAAa,CAAE,CAA9E,GACJ,IAAK,iBAAL,CACI,sCAAWxB,KAAX,MAAkBuB,MAAM,CAAE,IAA1B,GACJ,IAAK,cAAL,CACI,sCAAYvB,KAAZ,MAAmBuB,MAAM,CAAE,KAA3B,GACJ,IAAK,eAAL,CACI,sCAAWvB,KAAX,MAAkBwB,aAAa,CAAExB,KAAK,CAACwB,aAAN,CAAsB,CAAvD,GACJ,IAAK,iBAAL,CACI,sCAAWxB,KAAX,MAAkByB,KAAK,CAAEzB,KAAK,CAACyB,KAAN,CAAc,CAAvC,GACJ,QACI,MAAOzB,CAAAA,KAAP,CAdR,CAgBH,CAjBD,CAqBA,cAAeJ,CAAAA,eAAe,CAAC,CAC3BG,eAAe,CAAfA,eAD2B,CAE3B2B,WAAW,CAAXA,WAF2B,CAAD,CAA9B","sourcesContent":["import { combineReducers } from 'redux';\n\nconst initialQuestionState = {\n    questions: []\n};\n\n//reformatting the fetched data in and setting equal to questions piece of state\n//data will be an array of objects - each object is a single question\n//objects will have a question property with the question text, choices property which is an array of choices\n//and answer property which is the index of the correct answer in the array of choices\nconst questionReducer = (state=initialQuestionState, action) => {\n    switch(action.type) {\n        case 'FETCH_QUESTIONS':\n            const questions = action.payload.map((question) => {\n                const formattedQuestions = {\n                    question: question.question\n                }\n                const answerChoices = [...question.incorrect_answers];\n                formattedQuestions.answer = Math.floor(Math.random() * 3);\n                answerChoices.splice(formattedQuestions.answer, 0, question.correct_answer);\n                formattedQuestions.choices = [];\n                answerChoices.forEach((choice, index) => {\n                    formattedQuestions.choices.push(choice);\n                })\n                return formattedQuestions;\n            });\n            return {...state, questions: questions};\n        default:\n            return state;\n    };\n};\n\nconst initialState = {\n    start: false,\n    gameOver: false,\n    select: false,\n    questionIndex: 0,\n    score: 0\n}\n\nconst updateState = (state=initialState, action) => {\n    switch(action.type) {\n        case 'START_GAME':\n            return { ...state, start: true }\n        case 'GAME_OVER':\n            return {...state, gameOver: true, start: false, select: false, questionIndex: 0 }\n        case 'CHOICE_SELECTED':\n            return {...state, select: true };\n        case 'RESET_SELECT':\n            return { ...state, select: false };\n        case 'NEXT_QUESTION':\n            return {...state, questionIndex: state.questionIndex + 1 };\n        case 'INCREMENT_SCORE':\n            return {...state, score: state.score + 1 };\n        default: \n            return state;\n    }\n}\n\n\n\nexport default combineReducers({\n    questionReducer, \n    updateState\n});\n\n"]},"metadata":{},"sourceType":"module"}