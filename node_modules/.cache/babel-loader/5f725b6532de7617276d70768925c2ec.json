{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/aschnall/Documents/Portfolio/trivia/src/components/QuestionDisplay.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef } from 'react';\nimport NextQuestion from './NextQuestion';\nimport './QuestionDisplay.css';\n\nconst QuestionDisplay = ({\n  questions,\n  next,\n  select,\n  onCorrect,\n  questionIndex,\n  length\n}) => {\n  _s();\n\n  const refs = useRef([]); //looping through answer choices and checking them against the user's selected choice\n\n  const checkAnswer = event => {\n    const answerChoice = questions[questionIndex].answer;\n\n    for (let i = 0; i < refs.current.length; i++) {\n      if (event.target.value === questions[questionIndex][`choice${answerChoice}`]) {\n        refs.current[i].setAttribute(\"style\", \"background-color: green\");\n        onCorrect();\n      } else {\n        refs.current[i].setAttribute(\"style\", \"background-color: red\");\n      }\n    }\n  };\n\n  const prevent = event => {\n    event.preventDefault();\n  }; // const choices = () => {\n  // \tconst answerChoices = [...questionDetails.incorrect_answers];\n\n\n  display.questionChoices.map((choice, index) => {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"choice\",\n      ref: el => refs.current.push(el),\n      onClick: select ? prevent : checkAnswer,\n      children: choice.answerText\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 4\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question-display\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question-text\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: display.questionText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"choice-wrapper\",\n        children: choices\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"next\",\n      children: select ? /*#__PURE__*/_jsxDEV(NextQuestion, {\n        next: next,\n        questionNumber: questionNumber,\n        length: length - 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 15\n      }, this) : ''\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 3\n  }, this);\n};\n\n_s(QuestionDisplay, \"78a5ZvbznFIFfo3Z5YuaFsj29P0=\");\n\n_c = QuestionDisplay;\nexport default QuestionDisplay;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuestionDisplay\");","map":{"version":3,"sources":["/Users/aschnall/Documents/Portfolio/trivia/src/components/QuestionDisplay.js"],"names":["React","useRef","NextQuestion","QuestionDisplay","questions","next","select","onCorrect","questionIndex","length","refs","checkAnswer","event","answerChoice","answer","i","current","target","value","setAttribute","prevent","preventDefault","display","questionChoices","map","choice","index","el","push","answerText","questionText","choices","questionNumber"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,MAAf,QAA4B,OAA5B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAO,uBAAP;;AAEA,MAAMC,eAAe,GAAG,CAAC;AAACC,EAAAA,SAAD;AAAYC,EAAAA,IAAZ;AAAkBC,EAAAA,MAAlB;AAA0BC,EAAAA,SAA1B;AAAqCC,EAAAA,aAArC;AAAoDC,EAAAA;AAApD,CAAD,KAAiE;AAAA;;AACxF,QAAMC,IAAI,GAAGT,MAAM,CAAC,EAAD,CAAnB,CADwF,CAGxF;;AACA,QAAMU,WAAW,GAAGC,KAAK,IAAI;AAC5B,UAAMC,YAAY,GAAGT,SAAS,CAACI,aAAD,CAAT,CAAyBM,MAA9C;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,IAAI,CAACM,OAAL,CAAaP,MAAjC,EAAyCM,CAAC,EAA1C,EAA+C;AAC9C,UAAIH,KAAK,CAACK,MAAN,CAAaC,KAAb,KAAuBd,SAAS,CAACI,aAAD,CAAT,CAA0B,SAAQK,YAAa,EAA/C,CAA3B,EAA8E;AAC7EH,QAAAA,IAAI,CAACM,OAAL,CAAaD,CAAb,EAAgBI,YAAhB,CAA6B,OAA7B,EAAsC,yBAAtC;AACAZ,QAAAA,SAAS;AACT,OAHD,MAGO;AACNG,QAAAA,IAAI,CAACM,OAAL,CAAaD,CAAb,EAAgBI,YAAhB,CAA6B,OAA7B,EAAsC,uBAAtC;AACA;AACD;AACD,GAVD;;AAYA,QAAMC,OAAO,GAAGR,KAAK,IAAI;AACxBA,IAAAA,KAAK,CAACS,cAAN;AACA,GAFD,CAhBwF,CAoBxF;AACA;;;AAGCC,EAAAA,OAAO,CAACC,eAAR,CAAwBC,GAAxB,CAA4B,CAACC,MAAD,EAASC,KAAT,KAAmB;AAC/C,wBACC;AACC,MAAA,SAAS,EAAC,QADX;AAGC,MAAA,GAAG,EAAEC,EAAE,IAAIjB,IAAI,CAACM,OAAL,CAAaY,IAAb,CAAkBD,EAAlB,CAHZ;AAIC,MAAA,OAAO,EAAErB,MAAM,GAAGc,OAAH,GAAaT,WAJ7B;AAAA,gBAI2Cc,MAAM,CAACI;AAJlD,OAEMH,KAFN;AAAA;AAAA;AAAA;AAAA,YADD;AAQA,GATA;AAYD,sBACC;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,4BACC;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA,8BACC;AAAK,QAAA,SAAS,EAAC,eAAf;AAAA,+BACC;AAAA,oBAAKJ,OAAO,CAACQ;AAAb;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,cADD,eAIC;AAAK,QAAA,SAAS,EAAC,gBAAf;AAAA,kBACEC;AADF;AAAA;AAAA;AAAA;AAAA,cAJD;AAAA;AAAA;AAAA;AAAA;AAAA,YADD,eASC;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA,gBACEzB,MAAM,gBAAG,QAAC,YAAD;AAAc,QAAA,IAAI,EAAED,IAApB;AAA0B,QAAA,cAAc,EAAE2B,cAA1C;AAA0D,QAAA,MAAM,EAAEvB,MAAM,GAAC;AAAzE;AAAA;AAAA;AAAA;AAAA,cAAH,GAAoF;AAD5F;AAAA;AAAA;AAAA;AAAA,YATD;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AAeA,CAnDD;;GAAMN,e;;KAAAA,e;AAqDN,eAAeA,eAAf","sourcesContent":["import React, {useRef} from 'react';\nimport NextQuestion from './NextQuestion';\nimport './QuestionDisplay.css';\n\nconst QuestionDisplay = ({questions, next, select, onCorrect, questionIndex, length}) => {\n\tconst refs = useRef([]);\n\n\t//looping through answer choices and checking them against the user's selected choice\n\tconst checkAnswer = event => {\n\t\tconst answerChoice = questions[questionIndex].answer;\n\t\tfor (let i = 0; i < refs.current.length; i++ ) {\n\t\t\tif (event.target.value === questions[questionIndex][`choice${answerChoice}`]) {\n\t\t\t\trefs.current[i].setAttribute(\"style\", \"background-color: green\");\n\t\t\t\tonCorrect();\n\t\t\t} else {\n\t\t\t\trefs.current[i].setAttribute(\"style\", \"background-color: red\");\n\t\t\t}\n\t\t}\n\t}\n\n\tconst prevent = event => {\n\t\tevent.preventDefault();\n\t}\n\n\t// const choices = () => {\n\t// \tconst answerChoices = [...questionDetails.incorrect_answers];\n\n\t\t\n\t\tdisplay.questionChoices.map((choice, index) => {\n\t\treturn (\n\t\t\t<button \n\t\t\t\tclassName=\"choice\"\n\t\t\t\tkey={index}\n\t\t\t\tref={el => refs.current.push(el)} \n\t\t\t\tonClick={select ? prevent : checkAnswer}>{choice.answerText}\n\t\t\t</button>\n\t\t);\n\t})\n\n\n\treturn (\n\t\t<div className=\"container\">\n\t\t\t<div className=\"question-display\">\n\t\t\t\t<div className=\"question-text\">\n\t\t\t\t\t<h1>{display.questionText}</h1>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"choice-wrapper\">\n\t\t\t\t\t{choices}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div className=\"next\">\n\t\t\t\t{select ? <NextQuestion next={next} questionNumber={questionNumber} length={length-1} /> : ''}\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default QuestionDisplay;\n\n\n"]},"metadata":{},"sourceType":"module"}