{"ast":null,"code":"import { combineReducers } from 'redux';\nconst initialQuestionState = {\n  questions: []\n};\n\nconst questionReducer = (state = initialQuestionState, action) => {\n  switch (action.type) {\n    case 'FETCH_QUESTIONS':\n      return { ...state,\n        questions: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default combineReducers({\n  questionReducer\n}); // const questions = action.payload.map((question) => {\n//     const formattedQuestions = {\n//         question: question.question\n//     }\n//     const answerChoices = [...question.incorrect_answers];\n//     formattedQuestions.answer = Math.floor(Math.random() * 3);\n//     answerChoices.splice(formattedQuestions.answer, 0, question.correct_answer);\n//     formattedQuestions.choices = [];\n//     answerChoices.forEach((choice, index) => {\n//         formattedQuestions.choices.push(choice);\n//     })\n//     return formattedQuestions;","map":{"version":3,"sources":["/Users/aschnall/Documents/Portfolio/trivia-redux-edit/src/reducers/index.js"],"names":["combineReducers","initialQuestionState","questions","questionReducer","state","action","type","payload"],"mappings":"AAAA,SAASA,eAAT,QAAgC,OAAhC;AAEA,MAAMC,oBAAoB,GAAG;AACzBC,EAAAA,SAAS,EAAE;AADc,CAA7B;;AAIA,MAAMC,eAAe,GAAG,CAACC,KAAK,GAACH,oBAAP,EAA6BI,MAA7B,KAAwC;AAC5D,UAAOA,MAAM,CAACC,IAAd;AACI,SAAK,iBAAL;AACI,aAAO,EAAE,GAAGF,KAAL;AAAYF,QAAAA,SAAS,EAAEG,MAAM,CAACE;AAA9B,OAAP;;AACJ;AACI,aAAOH,KAAP;AAJR;AAMH,CAPD;;AASA,eAAeJ,eAAe,CAAC;AAACG,EAAAA;AAAD,CAAD,CAA9B,C,CAGY;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { combineReducers } from 'redux';\n\nconst initialQuestionState = {\n    questions: []\n};\n\nconst questionReducer = (state=initialQuestionState, action) => {\n    switch(action.type) {\n        case 'FETCH_QUESTIONS':\n            return { ...state, questions: action.payload }\n        default:\n            return state;\n    }\n};\n\nexport default combineReducers({questionReducer});\n\n\n            // const questions = action.payload.map((question) => {\n            //     const formattedQuestions = {\n            //         question: question.question\n            //     }\n            //     const answerChoices = [...question.incorrect_answers];\n            //     formattedQuestions.answer = Math.floor(Math.random() * 3);\n            //     answerChoices.splice(formattedQuestions.answer, 0, question.correct_answer);\n            //     formattedQuestions.choices = [];\n            //     answerChoices.forEach((choice, index) => {\n            //         formattedQuestions.choices.push(choice);\n            //     })\n            //     return formattedQuestions;"]},"metadata":{},"sourceType":"module"}