{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/aschnall/Documents/Portfolio/trivia/src/components/QuestionDisplay.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef } from 'react';\nimport NextQuestion from './NextQuestion';\nimport './QuestionDisplay.css';\n\nconst QuestionDisplay = ({\n  display,\n  next,\n  select,\n  onAnswerSelect,\n  onCorrect,\n  questionNumber,\n  length\n}) => {\n  _s();\n\n  const refs = useRef([]); //looping through answer choices and checking them against the user's selected choice\n\n  const checkAnswer = event => {\n    for (let i = 0; i < display.questionChoices.length; i++) {\n      if (event.target.textContent === display.questionChoices[i].answerText) {\n        if (display.questionChoices[i].isCorrect === false) {\n          refs.current[i].setAttribute(\"style\", \"background-color: red\");\n        } else {\n          refs.current[i].setAttribute(\"style\", \"background-color: green\");\n          onCorrect();\n        }\n      }\n\n      onAnswerSelect(true);\n\n      if (display.questionChoices[i].isCorrect === true) {\n        refs.current[i].setAttribute(\"style\", \"background-color: green\");\n      }\n    }\n  };\n\n  const prevent = event => {\n    event.preventDefault();\n  };\n\n  const choices = display.questionChoices.map((choice, index) => {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"choice\",\n      ref: el => refs.current.push(el),\n      onClick: select ? prevent : checkAnswer,\n      children: choice.answerText\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 4\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question-display\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question-text\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: display.questionText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"choice-wrapper\",\n        children: choices\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"next\",\n      children: select ? /*#__PURE__*/_jsxDEV(NextQuestion, {\n        next: next,\n        questionNumber: questionNumber,\n        length: length - 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 15\n      }, this) : ''\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 3\n  }, this);\n};\n\n_s(QuestionDisplay, \"78a5ZvbznFIFfo3Z5YuaFsj29P0=\");\n\n_c = QuestionDisplay;\nexport default QuestionDisplay;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuestionDisplay\");","map":{"version":3,"sources":["/Users/aschnall/Documents/Portfolio/trivia/src/components/QuestionDisplay.js"],"names":["React","useRef","NextQuestion","QuestionDisplay","display","next","select","onAnswerSelect","onCorrect","questionNumber","length","refs","checkAnswer","event","i","questionChoices","target","textContent","answerText","isCorrect","current","setAttribute","prevent","preventDefault","choices","map","choice","index","el","push","questionText"],"mappings":"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","sourcesContent":["import React, {useRef} from 'react';\nimport NextQuestion from './NextQuestion';\nimport './QuestionDisplay.css';\n\nconst QuestionDisplay = ({display, next, select, onAnswerSelect, onCorrect, questionNumber, length}) => {\n\tconst refs = useRef([]);\n\n\t//looping through answer choices and checking them against the user's selected choice\n\tconst checkAnswer = event => {\n\t\tfor (let i = 0; i < display.questionChoices.length; i++) {\n\t\t\tif (event.target.textContent === display.questionChoices[i].answerText) {\n\t\t\t\tif (display.questionChoices[i].isCorrect === false) {\n\t\t\t\t\trefs.current[i].setAttribute(\"style\", \"background-color: red\");\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\trefs.current[i].setAttribute(\"style\", \"background-color: green\");\n\t\t\t\t\tonCorrect();\n\t\t\t\t}\n\t\t\t}\n\t\t\tonAnswerSelect(true);\n\t\t\tif (display.questionChoices[i].isCorrect === true) {\n\t\t\t\trefs.current[i].setAttribute(\"style\", \"background-color: green\");\n\t\t\t}\n\t\t}\n\t}\n\n\tconst prevent = event => {\n\t\tevent.preventDefault();\n\t}\n\n\tconst choices = display.questionChoices.map((choice, index) => {\n\t\treturn (\n\t\t\t<button \n\t\t\t\tclassName=\"choice\"\n\t\t\t\tkey={index}\n\t\t\t\tref={el => refs.current.push(el)} \n\t\t\t\tonClick={select ? prevent : checkAnswer}>{choice.answerText}\n\t\t\t</button>\n\t\t);\n\t})\n\n\n\treturn (\n\t\t<div className=\"container\">\n\t\t\t<div className=\"question-display\">\n\t\t\t\t<div className=\"question-text\">\n\t\t\t\t\t<h1>{display.questionText}</h1>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"choice-wrapper\">\n\t\t\t\t\t{choices}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div className=\"next\">\n\t\t\t\t{select ? <NextQuestion next={next} questionNumber={questionNumber} length={length-1} /> : ''}\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default QuestionDisplay;\n\n\n"]},"metadata":{},"sourceType":"module"}