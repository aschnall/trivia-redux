{"ast":null,"code":"import { combineReducers } from 'redux';\nconst initialQuestionState = {\n  questions: []\n}; //reformatting the fetched data in and setting equal to questions piece of state\n//data will be an array of objects - each object is a single question\n//objects will have a question property with the question text, choices property which is an array of choices\n//and answer property which is the index of the correct answer in the array of choices\n\nconst questionReducer = (state = initialQuestionState, action) => {\n  switch (action.type) {\n    case 'FETCH_QUESTIONS':\n      const questions = action.payload.map(question => {\n        const formattedQuestions = {\n          question: question.question\n        };\n        const answerChoices = [...question.incorrect_answers];\n        formattedQuestions.answer = Math.floor(Math.random() * 3);\n        answerChoices.splice(formattedQuestions.answer, 0, question.correct_answer);\n        formattedQuestions.choices = [];\n        answerChoices.forEach((choice, index) => {\n          formattedQuestions.choices.push(choice);\n        });\n        return formattedQuestions;\n      });\n      return { ...state,\n        questions: questions\n      };\n\n    default:\n      return state;\n  }\n\n  ;\n};\n\nconst initialState = {\n  start: false,\n  gameOver: false,\n  select: false,\n  questionIndex: 0,\n  score: 0\n};\n\nconst updateState = (state = initialState, action) => {\n  switch (action.type) {\n    case 'START_GAME':\n      return { ...state,\n        start: true\n      };\n\n    case 'GAME_OVER':\n      return { ...state,\n        gameOver: true,\n        start: false,\n        select: false,\n        questionIndex: 0\n      };\n\n    case 'CHOICE_SELECTED':\n      return { ...state,\n        select: true\n      };\n\n    case 'RESET_SELECT':\n      return { ...state,\n        select: false\n      };\n\n    case 'NEXT_QUESTION':\n      return { ...state,\n        questionIndex: state.questionIndex + 1\n      };\n\n    case 'INCREMENT_SCORE':\n      return { ...state,\n        score: state.score + 1\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default combineReducers({\n  questionReducer,\n  updateState\n});","map":{"version":3,"sources":["/Users/aschnall/Documents/Portfolio/trivia-redux-edit/src/reducers/index.js"],"names":["combineReducers","initialQuestionState","questions","questionReducer","state","action","type","payload","map","question","formattedQuestions","answerChoices","incorrect_answers","answer","Math","floor","random","splice","correct_answer","choices","forEach","choice","index","push","initialState","start","gameOver","select","questionIndex","score","updateState"],"mappings":"AAAA,SAASA,eAAT,QAAgC,OAAhC;AAEA,MAAMC,oBAAoB,GAAG;AACzBC,EAAAA,SAAS,EAAE;AADc,CAA7B,C,CAIA;AACA;AACA;AACA;;AACA,MAAMC,eAAe,GAAG,CAACC,KAAK,GAACH,oBAAP,EAA6BI,MAA7B,KAAwC;AAC5D,UAAOA,MAAM,CAACC,IAAd;AACI,SAAK,iBAAL;AACI,YAAMJ,SAAS,GAAGG,MAAM,CAACE,OAAP,CAAeC,GAAf,CAAoBC,QAAD,IAAc;AAC/C,cAAMC,kBAAkB,GAAG;AACvBD,UAAAA,QAAQ,EAAEA,QAAQ,CAACA;AADI,SAA3B;AAGA,cAAME,aAAa,GAAG,CAAC,GAAGF,QAAQ,CAACG,iBAAb,CAAtB;AACAF,QAAAA,kBAAkB,CAACG,MAAnB,GAA4BC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,CAA3B,CAA5B;AACAL,QAAAA,aAAa,CAACM,MAAd,CAAqBP,kBAAkB,CAACG,MAAxC,EAAgD,CAAhD,EAAmDJ,QAAQ,CAACS,cAA5D;AACAR,QAAAA,kBAAkB,CAACS,OAAnB,GAA6B,EAA7B;AACAR,QAAAA,aAAa,CAACS,OAAd,CAAsB,CAACC,MAAD,EAASC,KAAT,KAAmB;AACrCZ,UAAAA,kBAAkB,CAACS,OAAnB,CAA2BI,IAA3B,CAAgCF,MAAhC;AACH,SAFD;AAGA,eAAOX,kBAAP;AACH,OAZiB,CAAlB;AAaA,aAAO,EAAC,GAAGN,KAAJ;AAAWF,QAAAA,SAAS,EAAEA;AAAtB,OAAP;;AACJ;AACI,aAAOE,KAAP;AAjBR;;AAkBC;AACJ,CApBD;;AAsBA,MAAMoB,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE,KADU;AAEjBC,EAAAA,QAAQ,EAAE,KAFO;AAGjBC,EAAAA,MAAM,EAAE,KAHS;AAIjBC,EAAAA,aAAa,EAAE,CAJE;AAKjBC,EAAAA,KAAK,EAAE;AALU,CAArB;;AAQA,MAAMC,WAAW,GAAG,CAAC1B,KAAK,GAACoB,YAAP,EAAqBnB,MAArB,KAAgC;AAChD,UAAOA,MAAM,CAACC,IAAd;AACI,SAAK,YAAL;AACI,aAAO,EAAE,GAAGF,KAAL;AAAYqB,QAAAA,KAAK,EAAE;AAAnB,OAAP;;AACJ,SAAK,WAAL;AACI,aAAO,EAAC,GAAGrB,KAAJ;AAAWsB,QAAAA,QAAQ,EAAE,IAArB;AAA2BD,QAAAA,KAAK,EAAE,KAAlC;AAAyCE,QAAAA,MAAM,EAAE,KAAjD;AAAwDC,QAAAA,aAAa,EAAE;AAAvE,OAAP;;AACJ,SAAK,iBAAL;AACI,aAAO,EAAC,GAAGxB,KAAJ;AAAWuB,QAAAA,MAAM,EAAE;AAAnB,OAAP;;AACJ,SAAK,cAAL;AACI,aAAO,EAAE,GAAGvB,KAAL;AAAYuB,QAAAA,MAAM,EAAE;AAApB,OAAP;;AACJ,SAAK,eAAL;AACI,aAAO,EAAC,GAAGvB,KAAJ;AAAWwB,QAAAA,aAAa,EAAExB,KAAK,CAACwB,aAAN,GAAsB;AAAhD,OAAP;;AACJ,SAAK,iBAAL;AACI,aAAO,EAAC,GAAGxB,KAAJ;AAAWyB,QAAAA,KAAK,EAAEzB,KAAK,CAACyB,KAAN,GAAc;AAAhC,OAAP;;AACJ;AACI,aAAOzB,KAAP;AAdR;AAgBH,CAjBD;;AAqBA,eAAeJ,eAAe,CAAC;AAC3BG,EAAAA,eAD2B;AAE3B2B,EAAAA;AAF2B,CAAD,CAA9B","sourcesContent":["import { combineReducers } from 'redux';\n\nconst initialQuestionState = {\n    questions: []\n};\n\n//reformatting the fetched data in and setting equal to questions piece of state\n//data will be an array of objects - each object is a single question\n//objects will have a question property with the question text, choices property which is an array of choices\n//and answer property which is the index of the correct answer in the array of choices\nconst questionReducer = (state=initialQuestionState, action) => {\n    switch(action.type) {\n        case 'FETCH_QUESTIONS':\n            const questions = action.payload.map((question) => {\n                const formattedQuestions = {\n                    question: question.question\n                }\n                const answerChoices = [...question.incorrect_answers];\n                formattedQuestions.answer = Math.floor(Math.random() * 3);\n                answerChoices.splice(formattedQuestions.answer, 0, question.correct_answer);\n                formattedQuestions.choices = [];\n                answerChoices.forEach((choice, index) => {\n                    formattedQuestions.choices.push(choice);\n                })\n                return formattedQuestions;\n            });\n            return {...state, questions: questions};\n        default:\n            return state;\n    };\n};\n\nconst initialState = {\n    start: false,\n    gameOver: false,\n    select: false,\n    questionIndex: 0,\n    score: 0\n}\n\nconst updateState = (state=initialState, action) => {\n    switch(action.type) {\n        case 'START_GAME':\n            return { ...state, start: true }\n        case 'GAME_OVER':\n            return {...state, gameOver: true, start: false, select: false, questionIndex: 0 }\n        case 'CHOICE_SELECTED':\n            return {...state, select: true };\n        case 'RESET_SELECT':\n            return { ...state, select: false };\n        case 'NEXT_QUESTION':\n            return {...state, questionIndex: state.questionIndex + 1 };\n        case 'INCREMENT_SCORE':\n            return {...state, score: state.score + 1 };\n        default: \n            return state;\n    }\n}\n\n\n\nexport default combineReducers({\n    questionReducer, \n    updateState\n});\n\n"]},"metadata":{},"sourceType":"module"}