{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/aschnall/Documents/Portfolio/trivia-redux-edit/src/App.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport StartMenu from './components/StartMenu';\nimport QuestionDisplay from './components/QuestionDisplay';\nimport { fetchQuestions } from './actions';\n\nclass App extends Component {\n  // state = {\n  // \tselect: false,\n  // \tquestionIndex: 0,\n  // \tscore: 0\n  // };\n  componentDidMount() {\n    this.props.fetchQuestions();\n  } // setting up the next question - if last quetsion has been reached reset the game\n  // nextQuestion = () => {\n  // \tthis.setState({questionIndex: this.state.questionIndex + 1});\n  // \tconst buttons = document.getElementsByTagName('button');\n  // \tfor (let i = 0; i < buttons.length; i++) {\n  // \t\tif (buttons[i].classList.contains('choice-correct')) {\n  // \t\t\tbuttons[i].classList.remove('choice-correct')\n  // \t\t} else if (buttons[i].classList.contains('choice-incorrect')) {\n  // \t\t\tbuttons[i].classList.remove('choice-incorrect')\n  // \t\t}\n  // \t}\n  // \tif (this.state.questionIndex < this.props.questions.length - 1) {\n  // \t\tthis.setState({select: false});\n  // \t} else {\n  // \t\tthis.props.fetchQuestions();\n  // \t\tthis.setState({\n  // \t\t\t// start: false,\n  // \t\t\tselect: false,\n  // \t\t\tquestionIndex: 0\n  // \t\t})\n  // \t}\n  // }\n  // incrementScore = () => {\n  // \tthis.setState({score: this.state.score + 1});\n  // }\n\n\n  render() {\n    // const { select, questionIndex, gameOver, score } = this.state;\n    const {\n      questions,\n      start\n    } = this.props;\n    return start ? /*#__PURE__*/_jsxDEV(QuestionDisplay // next={this.nextQuestion} \n    // select={select} \n    // onCorrect={this.incrementScore}\n    // questionIndex={questionIndex}\n    // length={questions.length}\n    // onAnswerSelect={this.onAnswerSelect}\n    , {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 12\n    }, this) :\n    /*#__PURE__*/\n    _jsxDEV(StartMenu // score={score}\n    // total={questions.length}\n    // fetch={fetchQuestions}\n    , {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 8\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    questions: state.questionReducer.questions,\n    start: state.updateState.start\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchQuestions\n})(App);","map":{"version":3,"sources":["/Users/aschnall/Documents/Portfolio/trivia-redux-edit/src/App.js"],"names":["React","Component","connect","StartMenu","QuestionDisplay","fetchQuestions","App","componentDidMount","props","render","questions","start","mapStateToProps","state","questionReducer","updateState"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,eAAP,MAA4B,8BAA5B;AACA,SAAQC,cAAR,QAA8B,WAA9B;;AAEA,MAAMC,GAAN,SAAkBL,SAAlB,CAA4B;AAC3B;AACA;AACA;AACA;AACA;AAEAM,EAAAA,iBAAiB,GAAG;AACnB,SAAKC,KAAL,CAAWH,cAAX;AACD,GAT2B,CAY3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;AAEAI,EAAAA,MAAM,GAAG;AACR;AACA,UAAM;AAAEC,MAAAA,SAAF;AAAaC,MAAAA;AAAb,QAAuB,KAAKH,KAAlC;AACA,WACCG,KAAK,gBAAG,QAAC,eAAD,CACH;AACA;AACA;AACA;AACA;AACA;AANG;AAAA;AAAA;AAAA;AAAA,YAAH;AAAA;AAQD,YAAC,SAAD,CACC;AACA;AACA;AAHD;AAAA;AAAA;AAAA;AAAA,YATL;AAeA;;AAzD0B;;AA4D5B,MAAMC,eAAe,GAAGC,KAAK,IAAI;AAChC,SAAO;AACNH,IAAAA,SAAS,EAAEG,KAAK,CAACC,eAAN,CAAsBJ,SAD3B;AAENC,IAAAA,KAAK,EAAEE,KAAK,CAACE,WAAN,CAAkBJ;AAFnB,GAAP;AAIA,CALD;;AAOA,eAAeT,OAAO,CAACU,eAAD,EAAkB;AAACP,EAAAA;AAAD,CAAlB,CAAP,CAA2CC,GAA3C,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport StartMenu from './components/StartMenu';\nimport QuestionDisplay from './components/QuestionDisplay';\nimport {fetchQuestions } from './actions';\n\nclass App extends Component {\n\t// state = {\n\t// \tselect: false,\n\t// \tquestionIndex: 0,\n\t// \tscore: 0\n\t// };\n\n\tcomponentDidMount() {\n\t\tthis.props.fetchQuestions();\n}\n\n\n\t// setting up the next question - if last quetsion has been reached reset the game\n\t// nextQuestion = () => {\n\t// \tthis.setState({questionIndex: this.state.questionIndex + 1});\n\t// \tconst buttons = document.getElementsByTagName('button');\n\t// \tfor (let i = 0; i < buttons.length; i++) {\n\t// \t\tif (buttons[i].classList.contains('choice-correct')) {\n\t// \t\t\tbuttons[i].classList.remove('choice-correct')\n\t// \t\t} else if (buttons[i].classList.contains('choice-incorrect')) {\n\t// \t\t\tbuttons[i].classList.remove('choice-incorrect')\n\t// \t\t}\n\t// \t}\n\t// \tif (this.state.questionIndex < this.props.questions.length - 1) {\n\t// \t\tthis.setState({select: false});\n\t// \t} else {\n\t// \t\tthis.props.fetchQuestions();\n\t// \t\tthis.setState({\n\t// \t\t\t// start: false,\n\t// \t\t\tselect: false,\n\t// \t\t\tquestionIndex: 0\n\t// \t\t})\n\t// \t}\n\t// }\n\n\t// incrementScore = () => {\n\t// \tthis.setState({score: this.state.score + 1});\n\t// }\n\n\trender() {\n\t\t// const { select, questionIndex, gameOver, score } = this.state;\n\t\tconst { questions, start } = this.props;\n\t\treturn (\n\t\t\tstart ? <QuestionDisplay \n\t\t\t\t\t\t\t\t// next={this.nextQuestion} \n\t\t\t\t\t\t\t\t// select={select} \n\t\t\t\t\t\t\t\t// onCorrect={this.incrementScore}\n\t\t\t\t\t\t\t\t// questionIndex={questionIndex}\n\t\t\t\t\t\t\t\t// length={questions.length}\n\t\t\t\t\t\t\t\t// onAnswerSelect={this.onAnswerSelect}\n\t\t\t\t\t\t\t/> : \n\t\t\t\t\t\t\t<StartMenu \n\t\t\t\t\t\t\t\t// score={score}\n\t\t\t\t\t\t\t\t// total={questions.length}\n\t\t\t\t\t\t\t\t// fetch={fetchQuestions}\n\t\t\t\t\t\t\t/>\n\t\t);\n\t}\n}\n\nconst mapStateToProps = state => {\n\treturn { \n\t\tquestions: state.questionReducer.questions,\n\t\tstart: state.updateState.start \n\t}\n}\n\nexport default connect(mapStateToProps, {fetchQuestions})(App);\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}