{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/aschnall/Documents/Portfolio/trivia/src/App.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux'; // import StartMenu from './components/StartMenu';\n// import QuestionDisplay from './components/QuestionDisplay';\n\nimport { fetchQuestions } from './actions';\n\nclass App extends Component {\n  // const [start, setStart] = useState(false);\n  // const [select, setSelect] = useState(false);\n  // const [questionNumber, setQuestionNumber] = useState(0);\n  // const [question, setQuestion] = useState(questions[questionNumber]);\n  // const [gameOver, setGameOver] = useState(false);\n  // const [score, setScore] = useState(0);\n  // state = {\n  // \tstart: false,\n  // \tselect: false,\n  // \tquestionIndex: 0,\n  // \tgameOver: false,\n  // \tquestionDetails: {},\n  // \tscore: 0\n  // };\n  componentDidMount() {\n    // const formattedQuestions = {\n    // \tquestion: question.question\n    // }\n    // const answerChoices = [...question.incorrect_answers];\n    // formattedQuestions.answer = Math.floor(Math.random() * 3) + 1;\n    // answerChoices.splice(formattedQuestions.answer -1, 0, question.correct_answer);\n    // answerChoices.forEach((choice, index) => {\n    // \tformattedQuestions[\"choice\" + (index+1)] = choice;\n    this.props.fetchQuestions();\n    console.log(this.props.questions);\n  }\n\n  render() {\n    this.props.fetchQuestions();\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"hello\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 4\n    }, this);\n  }\n\n} //setting up the next question - if last quetsion has been reached reset the game\n// \tnextQuestion = () => {\n// \t\tthis.setState({questionNumber: this.state.questionNumber + 1});\n// \t\tconst buttons = document.getElementsByTagName('button');\n// \t\tfor (let i = 0; i < buttons.length; i++) {\n// \t\t\tbuttons[i].removeAttribute('style');\n// \t\t}\n// \t\tif (this.state.questionNumber < questions.length) {\n// \t\t\tthis.setState({\n// \t\t\t\tquestionDetails: this.props.questions[questionNumber], select: false\n// \t\t\t});\n// \t\t} else {\n// \t\t\tthis.setState({\n// \t\t\t\tgameOver: true,\n// \t\t\t\tstart: false,\n// \t\t\t\tquestionDetails: {},\n// \t\t\t\tselect: false\n// \t\t\t})\n// \t\t}\n// \t}\n// \tincrementScore = () => {\n// \t\tthis.setState({score: this.state.score + 1});\n// \t}\n// \trender() {\n// \t\tconst { questionDetails, select, start, questionIndex, gameOver, score } = this.state;\n// \t\tconst { questions } = this.props;\n// \t\treturn (\n// \t\t\tstart ? <QuestionDisplay \n// \t\t\t\t\t\t\t\tquestionDetails={questionDetails} \n// \t\t\t\t\t\t\t\tnext={nextQuestion} \n// \t\t\t\t\t\t\t\tselect={select} \n// \t\t\t\t\t\t\t\tonCorrect={incrementScore}\n// \t\t\t\t\t\t\t\tquestionIndex={questionIndex}\n// \t\t\t\t\t\t\t\tlength={questions.length}\n// \t\t\t\t\t\t\t/> : \n// \t\t\t\t\t\t\t<StartMenu \n// \t\t\t\t\t\t\t\tshow={start} \n// \t\t\t\t\t\t\t\tgameOver={gameOver} \n// \t\t\t\t\t\t\t\tscore={score}\n// \t\t\t\t\t\t\t\ttotal={questions.length}\n// \t\t\t\t\t\t\t/>\n// \t\t);\n// \t}\n// };\n\n\nconst mapStateToProps = state => {\n  return {\n    questions: state.questionReducer\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchQuestions\n})(App);","map":{"version":3,"sources":["/Users/aschnall/Documents/Portfolio/trivia/src/App.js"],"names":["React","Component","connect","fetchQuestions","App","componentDidMount","props","console","log","questions","render","mapStateToProps","state","questionReducer"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB,C,CAEA;AACA;;AACA,SAAQC,cAAR,QAA8B,WAA9B;;AAEA,MAAMC,GAAN,SAAkBH,SAAlB,CAA4B;AAC3B;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEAI,EAAAA,iBAAiB,GAAG;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAKC,KAAL,CAAWH,cAAX;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKF,KAAL,CAAWG,SAAvB;AACA;;AAEDC,EAAAA,MAAM,GAAG;AACR,SAAKJ,KAAL,CAAWH,cAAX;AACA,wBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADD;AAGA;;AAnC0B,C,CAsC3B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,MAAMQ,eAAe,GAAGC,KAAK,IAAI;AAChC,SAAO;AAAEH,IAAAA,SAAS,EAAEG,KAAK,CAACC;AAAnB,GAAP;AACA,CAFD;;AAIA,eAAeX,OAAO,CAACS,eAAD,EAAkB;AAACR,EAAAA;AAAD,CAAlB,CAAP,CAA2CC,GAA3C,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\n// import StartMenu from './components/StartMenu';\n// import QuestionDisplay from './components/QuestionDisplay';\nimport {fetchQuestions } from './actions';\n\nclass App extends Component {\n\t// const [start, setStart] = useState(false);\n\t// const [select, setSelect] = useState(false);\n\t// const [questionNumber, setQuestionNumber] = useState(0);\n\t// const [question, setQuestion] = useState(questions[questionNumber]);\n\t// const [gameOver, setGameOver] = useState(false);\n\t// const [score, setScore] = useState(0);\n\n\t// state = {\n\t// \tstart: false,\n\t// \tselect: false,\n\t// \tquestionIndex: 0,\n\t// \tgameOver: false,\n\t// \tquestionDetails: {},\n\t// \tscore: 0\n\t// };\n\n\tcomponentDidMount() {\n\t\t// const formattedQuestions = {\n\t\t// \tquestion: question.question\n\t\t// }\n\t\t// const answerChoices = [...question.incorrect_answers];\n\t\t// formattedQuestions.answer = Math.floor(Math.random() * 3) + 1;\n\t\t// answerChoices.splice(formattedQuestions.answer -1, 0, question.correct_answer);\n\t\t// answerChoices.forEach((choice, index) => {\n\t\t// \tformattedQuestions[\"choice\" + (index+1)] = choice;\n\t\tthis.props.fetchQuestions();\n\t\tconsole.log(this.props.questions);\n\t}\n\n\trender() {\n\t\tthis.props.fetchQuestions();\n\t\treturn (\n\t\t\t<div>hello</div>\n\t\t);\n\t}\n}\n\n\t//setting up the next question - if last quetsion has been reached reset the game\n// \tnextQuestion = () => {\n// \t\tthis.setState({questionNumber: this.state.questionNumber + 1});\n// \t\tconst buttons = document.getElementsByTagName('button');\n// \t\tfor (let i = 0; i < buttons.length; i++) {\n// \t\t\tbuttons[i].removeAttribute('style');\n// \t\t}\n// \t\tif (this.state.questionNumber < questions.length) {\n// \t\t\tthis.setState({\n// \t\t\t\tquestionDetails: this.props.questions[questionNumber], select: false\n// \t\t\t});\n// \t\t} else {\n// \t\t\tthis.setState({\n// \t\t\t\tgameOver: true,\n// \t\t\t\tstart: false,\n// \t\t\t\tquestionDetails: {},\n// \t\t\t\tselect: false\n// \t\t\t})\n// \t\t}\n// \t}\n\n// \tincrementScore = () => {\n// \t\tthis.setState({score: this.state.score + 1});\n// \t}\n\n// \trender() {\n// \t\tconst { questionDetails, select, start, questionIndex, gameOver, score } = this.state;\n// \t\tconst { questions } = this.props;\n// \t\treturn (\n// \t\t\tstart ? <QuestionDisplay \n// \t\t\t\t\t\t\t\tquestionDetails={questionDetails} \n// \t\t\t\t\t\t\t\tnext={nextQuestion} \n// \t\t\t\t\t\t\t\tselect={select} \n// \t\t\t\t\t\t\t\tonCorrect={incrementScore}\n// \t\t\t\t\t\t\t\tquestionIndex={questionIndex}\n// \t\t\t\t\t\t\t\tlength={questions.length}\n// \t\t\t\t\t\t\t/> : \n// \t\t\t\t\t\t\t<StartMenu \n// \t\t\t\t\t\t\t\tshow={start} \n// \t\t\t\t\t\t\t\tgameOver={gameOver} \n// \t\t\t\t\t\t\t\tscore={score}\n// \t\t\t\t\t\t\t\ttotal={questions.length}\n// \t\t\t\t\t\t\t/>\n// \t\t);\n// \t}\n// };\n\nconst mapStateToProps = state => {\n\treturn { questions: state.questionReducer }\n}\n\nexport default connect(mapStateToProps, {fetchQuestions})(App);\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}