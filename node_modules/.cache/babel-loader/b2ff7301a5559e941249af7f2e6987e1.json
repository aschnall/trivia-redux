{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/aschnall/Documents/Portfolio/trivia/src/components/QuestionDisplay.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef } from 'react';\nimport NextQuestion from './NextQuestion';\nimport './QuestionDisplay.css';\n\nconst QuestionDisplay = ({\n  questions,\n  next,\n  select,\n  onCorrect,\n  questionIndex,\n  length\n}) => {\n  _s();\n\n  const refs = useRef([]); //looping through answer choices and checking them against the user's selected choice\n\n  const checkAnswer = event => {\n    const answerChoice = questions[questionIndex].answer;\n\n    for (let i = 0; i < refs.current.length; i++) {\n      if (event.target.value === questions[questionIndex].choices[answerChoice]) {\n        refs.current[i].setAttribute(\"style\", \"background-color: green\");\n        onCorrect();\n      } else {\n        refs.current[i].setAttribute(\"style\", \"background-color: red\");\n      }\n    }\n  };\n\n  const prevent = event => {\n    event.preventDefault();\n  }; // const choices = () => {\n  // \tconst answerChoices = [...questionDetails.incorrect_answers];\n\n\n  const choices = questions[questionIndex].choices.map((choice, index) => {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"choice\",\n      ref: el => refs.current.push(el),\n      onClick: select ? prevent : checkAnswer,\n      children: choice\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: choices\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 4\n  }, this);\n}; // \treturn (\n// \t\t<div className=\"container\">\n// \t\t\t<div className=\"question-display\">\n// \t\t\t\t<div className=\"question-text\">\n// \t\t\t\t\t<h1>{display.questionText}</h1>\n// \t\t\t\t</div>\n// \t\t\t\t<div className=\"choice-wrapper\">\n// \t\t\t\t\t{choices}\n// \t\t\t\t</div>\n// \t\t\t</div>\n// \t\t\t<div className=\"next\">\n// \t\t\t\t{select ? <NextQuestion next={next} questionNumber={questionNumber} length={length-1} /> : ''}\n// \t\t\t</div>\n// \t\t</div>\n// \t);\n// }\n\n\n_s(QuestionDisplay, \"78a5ZvbznFIFfo3Z5YuaFsj29P0=\");\n\n_c = QuestionDisplay;\nexport default QuestionDisplay;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuestionDisplay\");","map":{"version":3,"sources":["/Users/aschnall/Documents/Portfolio/trivia/src/components/QuestionDisplay.js"],"names":["React","useRef","NextQuestion","QuestionDisplay","questions","next","select","onCorrect","questionIndex","length","refs","checkAnswer","event","answerChoice","answer","i","current","target","value","choices","setAttribute","prevent","preventDefault","map","choice","index","el","push"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,MAAf,QAA4B,OAA5B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAO,uBAAP;;AAEA,MAAMC,eAAe,GAAG,CAAC;AAACC,EAAAA,SAAD;AAAYC,EAAAA,IAAZ;AAAkBC,EAAAA,MAAlB;AAA0BC,EAAAA,SAA1B;AAAqCC,EAAAA,aAArC;AAAoDC,EAAAA;AAApD,CAAD,KAAiE;AAAA;;AACxF,QAAMC,IAAI,GAAGT,MAAM,CAAC,EAAD,CAAnB,CADwF,CAGxF;;AACA,QAAMU,WAAW,GAAGC,KAAK,IAAI;AAC5B,UAAMC,YAAY,GAAGT,SAAS,CAACI,aAAD,CAAT,CAAyBM,MAA9C;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,IAAI,CAACM,OAAL,CAAaP,MAAjC,EAAyCM,CAAC,EAA1C,EAA+C;AAC9C,UAAIH,KAAK,CAACK,MAAN,CAAaC,KAAb,KAAuBd,SAAS,CAACI,aAAD,CAAT,CAAyBW,OAAzB,CAAiCN,YAAjC,CAA3B,EAA2E;AAC1EH,QAAAA,IAAI,CAACM,OAAL,CAAaD,CAAb,EAAgBK,YAAhB,CAA6B,OAA7B,EAAsC,yBAAtC;AACAb,QAAAA,SAAS;AACT,OAHD,MAGO;AACNG,QAAAA,IAAI,CAACM,OAAL,CAAaD,CAAb,EAAgBK,YAAhB,CAA6B,OAA7B,EAAsC,uBAAtC;AACA;AACD;AACD,GAVD;;AAYA,QAAMC,OAAO,GAAGT,KAAK,IAAI;AACxBA,IAAAA,KAAK,CAACU,cAAN;AACA,GAFD,CAhBwF,CAoBxF;AACA;;;AAGA,QAAMH,OAAO,GAAGf,SAAS,CAACI,aAAD,CAAT,CAAyBW,OAAzB,CAAiCI,GAAjC,CAAqC,CAACC,MAAD,EAASC,KAAT,KAAmB;AACtE,wBACC;AACC,MAAA,SAAS,EAAC,QADX;AAGC,MAAA,GAAG,EAAEC,EAAE,IAAIhB,IAAI,CAACM,OAAL,CAAaW,IAAb,CAAkBD,EAAlB,CAHZ;AAIC,MAAA,OAAO,EAAEpB,MAAM,GAAGe,OAAH,GAAaV,WAJ7B;AAAA,gBAI2Ca;AAJ3C,OAEMC,KAFN;AAAA;AAAA;AAAA;AAAA,YADD;AAQA,GATc,CAAhB;AAUC,sBACC;AAAA,cACEN;AADF;AAAA;AAAA;AAAA;AAAA,UADD;AAKA,CAvCF,C,CA0CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;GAzDMhB,e;;KAAAA,e;AA2DN,eAAeA,eAAf","sourcesContent":["import React, {useRef} from 'react';\nimport NextQuestion from './NextQuestion';\nimport './QuestionDisplay.css';\n\nconst QuestionDisplay = ({questions, next, select, onCorrect, questionIndex, length}) => {\n\tconst refs = useRef([]);\n\n\t//looping through answer choices and checking them against the user's selected choice\n\tconst checkAnswer = event => {\n\t\tconst answerChoice = questions[questionIndex].answer;\n\t\tfor (let i = 0; i < refs.current.length; i++ ) {\n\t\t\tif (event.target.value === questions[questionIndex].choices[answerChoice]) {\n\t\t\t\trefs.current[i].setAttribute(\"style\", \"background-color: green\");\n\t\t\t\tonCorrect();\n\t\t\t} else {\n\t\t\t\trefs.current[i].setAttribute(\"style\", \"background-color: red\");\n\t\t\t}\n\t\t}\n\t}\n\n\tconst prevent = event => {\n\t\tevent.preventDefault();\n\t}\n\n\t// const choices = () => {\n\t// \tconst answerChoices = [...questionDetails.incorrect_answers];\n\n\t\t\n\tconst choices = questions[questionIndex].choices.map((choice, index) => {\n\t\t\treturn (\n\t\t\t\t<button \n\t\t\t\t\tclassName=\"choice\"\n\t\t\t\t\tkey={index}\n\t\t\t\t\tref={el => refs.current.push(el)} \n\t\t\t\t\tonClick={select ? prevent : checkAnswer}>{choice}\n\t\t\t\t</button>\n\t\t\t);\n\t\t})\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t{choices}\n\t\t\t</div>\n\t\t);\n\t}\n\n\n// \treturn (\n// \t\t<div className=\"container\">\n// \t\t\t<div className=\"question-display\">\n// \t\t\t\t<div className=\"question-text\">\n// \t\t\t\t\t<h1>{display.questionText}</h1>\n// \t\t\t\t</div>\n// \t\t\t\t<div className=\"choice-wrapper\">\n// \t\t\t\t\t{choices}\n// \t\t\t\t</div>\n// \t\t\t</div>\n// \t\t\t<div className=\"next\">\n// \t\t\t\t{select ? <NextQuestion next={next} questionNumber={questionNumber} length={length-1} /> : ''}\n// \t\t\t</div>\n// \t\t</div>\n// \t);\n// }\n\nexport default QuestionDisplay;\n\n\n"]},"metadata":{},"sourceType":"module"}