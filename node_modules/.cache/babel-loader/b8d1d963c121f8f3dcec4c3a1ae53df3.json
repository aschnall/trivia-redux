{"ast":null,"code":"import { combineReducers } from 'redux';\nconst initialState = [{\n  answer: null,\n  choice1: '',\n  choice2: '',\n  choice3: '',\n  choice4: '',\n  question: ''\n}];\n\nconst questionReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'FETCH_QUESTIONS':\n      return action.payload.forEach((question, index) => {\n        const formattedQuestions = {\n          question: question.question\n        };\n        const answerChoices = [...question.incorrect_answers];\n        formattedQuestions.answer = Math.floor(Math.random() * 3) + 1;\n        answerChoices.splice(formattedQuestions.answer - 1, 0, question.correct_answer);\n        answerChoices.forEach((choice, index) => {\n          formattedQuestions[\"choice\" + (index + 1)] = choice;\n        });\n      });\n\n    default:\n      return state;\n  }\n}; // this.props.questions.forEach((question, index) => {\n//     const formattedQuestions = {\n//         question: question.question\n//     }\n//     const answerChoices = [...question.incorrect_answers];\n//     formattedQuestions.answer = Math.floor(Math.random() * 3) + 1;\n//     answerChoices.splice(formattedQuestions.answer -1, 0, question.correct_answer);\n//     answerChoices.forEach((choice, index) => {\n//         formattedQuestions[\"choice\" + (index+1)] = choice;\n//     })\n// })\n// console.log(formattedQuestions);\n\n\nexport default combineReducers({\n  questionReducer\n});","map":{"version":3,"sources":["/Users/aschnall/Documents/Portfolio/trivia/src/reducers/index.js"],"names":["combineReducers","initialState","answer","choice1","choice2","choice3","choice4","question","questionReducer","state","action","type","payload","forEach","index","formattedQuestions","answerChoices","incorrect_answers","Math","floor","random","splice","correct_answer","choice"],"mappings":"AAAA,SAASA,eAAT,QAAgC,OAAhC;AAEA,MAAMC,YAAY,GAAG,CAAC;AAClBC,EAAAA,MAAM,EAAE,IADU;AAElBC,EAAAA,OAAO,EAAE,EAFS;AAGlBC,EAAAA,OAAO,EAAE,EAHS;AAIlBC,EAAAA,OAAO,EAAE,EAJS;AAKlBC,EAAAA,OAAO,EAAE,EALS;AAMlBC,EAAAA,QAAQ,EAAE;AANQ,CAAD,CAArB;;AASA,MAAMC,eAAe,GAAG,CAACC,KAAK,GAACR,YAAP,EAAqBS,MAArB,KAAgC;AACpD,UAAOA,MAAM,CAACC,IAAd;AACI,SAAK,iBAAL;AACI,aAAOD,MAAM,CAACE,OAAP,CAAeC,OAAf,CAAuB,CAACN,QAAD,EAAWO,KAAX,KAAqB;AAC/C,cAAMC,kBAAkB,GAAG;AACvBR,UAAAA,QAAQ,EAAEA,QAAQ,CAACA;AADI,SAA3B;AAGA,cAAMS,aAAa,GAAG,CAAC,GAAGT,QAAQ,CAACU,iBAAb,CAAtB;AACAF,QAAAA,kBAAkB,CAACb,MAAnB,GAA4BgB,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,CAA3B,IAAgC,CAA5D;AACAJ,QAAAA,aAAa,CAACK,MAAd,CAAqBN,kBAAkB,CAACb,MAAnB,GAA2B,CAAhD,EAAmD,CAAnD,EAAsDK,QAAQ,CAACe,cAA/D;AACAN,QAAAA,aAAa,CAACH,OAAd,CAAsB,CAACU,MAAD,EAAST,KAAT,KAAmB;AACrCC,UAAAA,kBAAkB,CAAC,YAAYD,KAAK,GAAC,CAAlB,CAAD,CAAlB,GAA2CS,MAA3C;AACH,SAFD;AAGH,OAVM,CAAP;;AAWJ;AACI,aAAOd,KAAP;AAdR;AAgBH,CAjBD,C,CAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAeT,eAAe,CAAC;AAACQ,EAAAA;AAAD,CAAD,CAA9B","sourcesContent":["import { combineReducers } from 'redux';\n\nconst initialState = [{\n    answer: null,\n    choice1: '',\n    choice2: '',\n    choice3: '',\n    choice4: '',\n    question: ''\n}]\n\nconst questionReducer = (state=initialState, action) => {\n    switch(action.type) {\n        case 'FETCH_QUESTIONS':\n            return action.payload.forEach((question, index) => {\n                const formattedQuestions = {\n                    question: question.question\n                }\n                const answerChoices = [...question.incorrect_answers];\n                formattedQuestions.answer = Math.floor(Math.random() * 3) + 1;\n                answerChoices.splice(formattedQuestions.answer -1, 0, question.correct_answer);\n                answerChoices.forEach((choice, index) => {\n                    formattedQuestions[\"choice\" + (index+1)] = choice;\n                })\n            });\n        default:\n            return state;\n    }\n};\n\n\n// this.props.questions.forEach((question, index) => {\n//     const formattedQuestions = {\n//         question: question.question\n//     }\n//     const answerChoices = [...question.incorrect_answers];\n//     formattedQuestions.answer = Math.floor(Math.random() * 3) + 1;\n//     answerChoices.splice(formattedQuestions.answer -1, 0, question.correct_answer);\n//     answerChoices.forEach((choice, index) => {\n//         formattedQuestions[\"choice\" + (index+1)] = choice;\n//     })\n// })\n// console.log(formattedQuestions);\n\nexport default combineReducers({questionReducer});"]},"metadata":{},"sourceType":"module"}