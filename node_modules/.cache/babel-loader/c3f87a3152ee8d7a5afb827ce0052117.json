{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/aschnall/Documents/Portfolio/trivia-redux-edit/src/components/QuestionDisplay.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { onChoiceSelect, onCorrect } from '../actions';\nimport NextQuestion from './NextQuestion';\nimport '../style/App.scss';\n\nclass QuestionDisplay extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.checkAnswer = event => {\n      const choices = document.getElementsByClassName('choice');\n      let buttonIndex = 0;\n\n      for (let i = 0; i < choices.length; i++) {\n        if (event.target.textContent === choices[i].textContent) {\n          buttonIndex = i;\n          break;\n        }\n      }\n\n      const answerIndex = this.props.questions[this.props.questionIndex].answer;\n\n      if (event.target.textContent === this.props.questions[this.props.questionIndex].choices[answerIndex]) {\n        choices[answerIndex].classList.add(\"choice-correct\");\n        this.props.onCorrect();\n      } else {\n        //need to find index of the event.target.textcontent ref - loop through refs\n        choices[buttonIndex].classList.add(\"choice-incorrect\");\n        choices[answerIndex].classList.add(\"choice-correct\");\n      }\n    };\n  }\n\n  renderChoices() {\n    const choices = this.props.questions[this.props.questionIndex].choices.map((choice, index) => {\n      return /*#__PURE__*/_jsxDEV(\"button\", {\n        dangerouslySetInnerHTML: {\n          __html: choice\n        },\n        className: \"choice\",\n        onClick: this.checkAnswer\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 5\n      }, this);\n    });\n    return choices;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: [\"Question: \", this.props.questionIndex + 1, \" of \", this.props.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question-display\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"question-text\",\n          children: /*#__PURE__*/_jsxDEV(\"h1\", {\n            dangerouslySetInnerHTML: {\n              __html: this.props.questions[this.props.questionIndex].question\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"choice-wrapper\",\n          children: this.renderChoices()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"next\",\n        children: this.props.select ? /*#__PURE__*/_jsxDEV(NextQuestion, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 27\n        }, this) : ''\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 4\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    questionIndex: state.questionIndexReducer.questionIndex,\n    questions: state.questionReducer.questions,\n    select: state.selectReducer.select\n  };\n};\n\nexport default connect(mapStateToProps, {\n  onChoiceSelect,\n  onCorrect\n})(QuestionDisplay); // const QuestionDisplay = ({questions, next, select, onCorrect, questionIndex, length, onAnswerSelect}) => {\n// \tconst refs = useRef([]);\n// \t//looping through answer choices and checking them against the user's selected choice\n// \tconst checkAnswer = event => {\n// \t\tlet refIndex = 0;\n// \t\tfor (let i = 0; i < refs.current.length; i++) {\n// \t\t\tif (event.target.textContent === refs.current[i].textContent) {\n// \t\t\t\trefIndex = i;\n// \t\t\t\tbreak;\n// \t\t\t}\n// \t\t}\n// \t\tconst answerIndex = questions[questionIndex].answer;\n// \t\tif (event.target.textContent === questions[questionIndex].choices[answerIndex]) {\n// \t\t\trefs.current[answerIndex].classList.add(\"choice-correct\");\n// \t\t\tonCorrect();\n// \t\t}\n// \t\telse {\n// \t\t\t//need to find index of the event.target.textcontent ref - loop through refs\n// \t\t\trefs.current[refIndex].classList.add(\"choice-incorrect\");\n// \t\t\trefs.current[answerIndex].classList.add(\"choice-correct\");\n// \t\t}\n// \t\tonAnswerSelect();\n// \t}\n// \tconst prevent = event => {\n// \t\tevent.preventDefault();\n// \t}\n// \tconst choices = questions[questionIndex].choices.map((choice, index) => {\n// \t\treturn (\n// \t\t\t<button \n// \t\t\t\tdangerouslySetInnerHTML={{__html:choice}}\n// \t\t\t\tclassName=\"choice\"\n// \t\t\t\tkey={index}\n// \t\t\t\tref={el => refs.current.push(el)} \n// \t\t\t\tonClick={select ? prevent : checkAnswer}\n// \t\t\t>\n// \t\t\t</button>\n// \t\t);\n// \t})\n// \treturn (\n// \t\t<div className=\"container\">\n// \t\t\t<strong>Question: {questionIndex + 1} of {length}</strong>\n// \t\t\t<div className=\"question-display\">\n// \t\t\t\t<div className=\"question-text\">\n// \t\t\t\t\t<h1 dangerouslySetInnerHTML={{__html:questions[questionIndex].question}}></h1>\n// \t\t\t\t</div>\n// \t\t\t\t<div className=\"choice-wrapper\">\n// \t\t\t\t\t{choices}\n// \t\t\t\t</div>\n// \t\t\t</div>\n// \t\t\t<div className=\"next\">\n// \t\t\t\t{select ? <NextQuestion next={next} questionIndex={questionIndex} length={length-1} /> : ''}\n// \t\t\t</div>\n// \t\t</div>\n// \t);\n// }","map":{"version":3,"sources":["/Users/aschnall/Documents/Portfolio/trivia-redux-edit/src/components/QuestionDisplay.js"],"names":["React","Component","connect","onChoiceSelect","onCorrect","NextQuestion","QuestionDisplay","checkAnswer","event","choices","document","getElementsByClassName","buttonIndex","i","length","target","textContent","answerIndex","props","questions","questionIndex","answer","classList","add","renderChoices","map","choice","index","__html","render","question","select","mapStateToProps","state","questionIndexReducer","questionReducer","selectReducer"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,cAAT,EAAyBC,SAAzB,QAA0C,YAA1C;AAEA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAO,mBAAP;;AAEA,MAAMC,eAAN,SAA8BL,SAA9B,CAAwC;AAAA;AAAA;;AAAA,SAEvCM,WAFuC,GAEzBC,KAAK,IAAI;AACtB,YAAMC,OAAO,GAAGC,QAAQ,CAACC,sBAAT,CAAgC,QAAhC,CAAhB;AACA,UAAIC,WAAW,GAAG,CAAlB;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,OAAO,CAACK,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACxC,YAAIL,KAAK,CAACO,MAAN,CAAaC,WAAb,KAA6BP,OAAO,CAACI,CAAD,CAAP,CAAWG,WAA5C,EAAyD;AACxDJ,UAAAA,WAAW,GAAGC,CAAd;AACA;AACA;AACD;;AACD,YAAMI,WAAW,GAAG,KAAKC,KAAL,CAAWC,SAAX,CAAqB,KAAKD,KAAL,CAAWE,aAAhC,EAA+CC,MAAnE;;AACA,UAAIb,KAAK,CAACO,MAAN,CAAaC,WAAb,KAA6B,KAAKE,KAAL,CAAWC,SAAX,CAAqB,KAAKD,KAAL,CAAWE,aAAhC,EAA+CX,OAA/C,CAAuDQ,WAAvD,CAAjC,EAAsG;AACrGR,QAAAA,OAAO,CAACQ,WAAD,CAAP,CAAqBK,SAArB,CAA+BC,GAA/B,CAAmC,gBAAnC;AACA,aAAKL,KAAL,CAAWd,SAAX;AACA,OAHD,MAIK;AACJ;AACAK,QAAAA,OAAO,CAACG,WAAD,CAAP,CAAqBU,SAArB,CAA+BC,GAA/B,CAAmC,kBAAnC;AACAd,QAAAA,OAAO,CAACQ,WAAD,CAAP,CAAqBK,SAArB,CAA+BC,GAA/B,CAAmC,gBAAnC;AACA;AACD,KArBsC;AAAA;;AAwBvCC,EAAAA,aAAa,GAAG;AACf,UAAMf,OAAO,GAAG,KAAKS,KAAL,CAAWC,SAAX,CAAqB,KAAKD,KAAL,CAAWE,aAAhC,EAA+CX,OAA/C,CAAuDgB,GAAvD,CAA2D,CAACC,MAAD,EAASC,KAAT,KAAmB;AAC7F,0BACC;AACC,QAAA,uBAAuB,EAAE;AAACC,UAAAA,MAAM,EAAEF;AAAT,SAD1B;AAEC,QAAA,SAAS,EAAC,QAFX;AAIC,QAAA,OAAO,EAAE,KAAKnB;AAJf,SAGMoB,KAHN;AAAA;AAAA;AAAA;AAAA,cADD;AASA,KAVe,CAAhB;AAWA,WAAOlB,OAAP;AACA;;AAEDoB,EAAAA,MAAM,GAAG;AACR,wBACC;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BACC;AAAA,iCAAmB,KAAKX,KAAL,CAAWE,aAAX,GAA2B,CAA9C,UAAqD,KAAKF,KAAL,CAAWJ,MAAhE;AAAA;AAAA;AAAA;AAAA;AAAA,cADD,eAEC;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA,gCACC;AAAK,UAAA,SAAS,EAAC,eAAf;AAAA,iCACC;AAAI,YAAA,uBAAuB,EAAE;AAACc,cAAAA,MAAM,EAAC,KAAKV,KAAL,CAAWC,SAAX,CAAqB,KAAKD,KAAL,CAAWE,aAAhC,EAA+CU;AAAvD;AAA7B;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,gBADD,eAIC;AAAK,UAAA,SAAS,EAAC,gBAAf;AAAA,oBACE,KAAKN,aAAL;AADF;AAAA;AAAA;AAAA;AAAA,gBAJD;AAAA;AAAA;AAAA;AAAA;AAAA,cAFD,eAUC;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA,kBACE,KAAKN,KAAL,CAAWa,MAAX,gBAAoB,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,gBAApB,GAAuC;AADzC;AAAA;AAAA;AAAA;AAAA,cAVD;AAAA;AAAA;AAAA;AAAA;AAAA,YADD;AAgBA;;AAxDsC;;AA2DxC,MAAMC,eAAe,GAAGC,KAAK,IAAI;AAChC,SAAO;AACNb,IAAAA,aAAa,EAAEa,KAAK,CAACC,oBAAN,CAA2Bd,aADpC;AAEND,IAAAA,SAAS,EAAEc,KAAK,CAACE,eAAN,CAAsBhB,SAF3B;AAGNY,IAAAA,MAAM,EAAEE,KAAK,CAACG,aAAN,CAAoBL;AAHtB,GAAP;AAKA,CAND;;AAQA,eAAe7B,OAAO,CAAC8B,eAAD,EAAkB;AAAC7B,EAAAA,cAAD;AAAiBC,EAAAA;AAAjB,CAAlB,CAAP,CAAuDE,eAAvD,CAAf,C,CAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, {Component} from 'react';\nimport { connect } from 'react-redux';\nimport { onChoiceSelect, onCorrect } from '../actions';\n\nimport NextQuestion from './NextQuestion';\nimport '../style/App.scss';\n\nclass QuestionDisplay extends Component {\n\n\tcheckAnswer = event => {\n\t\tconst choices = document.getElementsByClassName('choice');\n\t\tlet buttonIndex = 0;\n\t\tfor (let i = 0; i < choices.length; i++) {\n\t\t\tif (event.target.textContent === choices[i].textContent) {\n\t\t\t\tbuttonIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tconst answerIndex = this.props.questions[this.props.questionIndex].answer;\n\t\tif (event.target.textContent === this.props.questions[this.props.questionIndex].choices[answerIndex]) {\n\t\t\tchoices[answerIndex].classList.add(\"choice-correct\");\n\t\t\tthis.props.onCorrect();\n\t\t}\n\t\telse {\n\t\t\t//need to find index of the event.target.textcontent ref - loop through refs\n\t\t\tchoices[buttonIndex].classList.add(\"choice-incorrect\");\n\t\t\tchoices[answerIndex].classList.add(\"choice-correct\");\n\t\t}\n\t}\n\n\n\trenderChoices() {\n\t\tconst choices = this.props.questions[this.props.questionIndex].choices.map((choice, index) => {\n\t\t\treturn (\n\t\t\t\t<button\n\t\t\t\t\tdangerouslySetInnerHTML={{__html: choice}}\n\t\t\t\t\tclassName=\"choice\"\n\t\t\t\t\tkey={index}\n\t\t\t\t\tonClick={this.checkAnswer}\n\t\t\t\t>\n\t\t\t\t</button>\n\t\t\t);\n\t\t})\n\t\treturn choices;\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"container\">\n\t\t\t\t<strong>Question: {this.props.questionIndex + 1} of {this.props.length}</strong>\n\t\t\t\t<div className=\"question-display\">\n\t\t\t\t\t<div className=\"question-text\">\n\t\t\t\t\t\t<h1 dangerouslySetInnerHTML={{__html:this.props.questions[this.props.questionIndex].question}}></h1>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"choice-wrapper\">\n\t\t\t\t\t\t{this.renderChoices()}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"next\">\n\t\t\t\t\t{this.props.select ? <NextQuestion /> : ''}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nconst mapStateToProps = state => {\n\treturn {\n\t\tquestionIndex: state.questionIndexReducer.questionIndex,\n\t\tquestions: state.questionReducer.questions,\n\t\tselect: state.selectReducer.select\n\t};\n};\n\nexport default connect(mapStateToProps, {onChoiceSelect, onCorrect })(QuestionDisplay);\n\n// const QuestionDisplay = ({questions, next, select, onCorrect, questionIndex, length, onAnswerSelect}) => {\n// \tconst refs = useRef([]);\n\n// \t//looping through answer choices and checking them against the user's selected choice\n// \tconst checkAnswer = event => {\n// \t\tlet refIndex = 0;\n// \t\tfor (let i = 0; i < refs.current.length; i++) {\n// \t\t\tif (event.target.textContent === refs.current[i].textContent) {\n// \t\t\t\trefIndex = i;\n// \t\t\t\tbreak;\n// \t\t\t}\n// \t\t}\n// \t\tconst answerIndex = questions[questionIndex].answer;\n// \t\tif (event.target.textContent === questions[questionIndex].choices[answerIndex]) {\n// \t\t\trefs.current[answerIndex].classList.add(\"choice-correct\");\n// \t\t\tonCorrect();\n// \t\t}\n// \t\telse {\n// \t\t\t//need to find index of the event.target.textcontent ref - loop through refs\n// \t\t\trefs.current[refIndex].classList.add(\"choice-incorrect\");\n// \t\t\trefs.current[answerIndex].classList.add(\"choice-correct\");\n// \t\t}\n// \t\tonAnswerSelect();\n// \t}\n\t\n// \tconst prevent = event => {\n// \t\tevent.preventDefault();\n// \t}\n\n// \tconst choices = questions[questionIndex].choices.map((choice, index) => {\n// \t\treturn (\n// \t\t\t<button \n// \t\t\t\tdangerouslySetInnerHTML={{__html:choice}}\n// \t\t\t\tclassName=\"choice\"\n// \t\t\t\tkey={index}\n// \t\t\t\tref={el => refs.current.push(el)} \n// \t\t\t\tonClick={select ? prevent : checkAnswer}\n// \t\t\t>\n// \t\t\t</button>\n// \t\t);\n// \t})\n\n// \treturn (\n// \t\t<div className=\"container\">\n// \t\t\t<strong>Question: {questionIndex + 1} of {length}</strong>\n// \t\t\t<div className=\"question-display\">\n// \t\t\t\t<div className=\"question-text\">\n// \t\t\t\t\t<h1 dangerouslySetInnerHTML={{__html:questions[questionIndex].question}}></h1>\n// \t\t\t\t</div>\n// \t\t\t\t<div className=\"choice-wrapper\">\n// \t\t\t\t\t{choices}\n// \t\t\t\t</div>\n// \t\t\t</div>\n// \t\t\t<div className=\"next\">\n// \t\t\t\t{select ? <NextQuestion next={next} questionIndex={questionIndex} length={length-1} /> : ''}\n// \t\t\t</div>\n// \t\t</div>\n// \t);\n// }\n\n\n\n"]},"metadata":{},"sourceType":"module"}