{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/aschnall/Documents/Portfolio/trivia-redux-edit/src/App.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport StartMenu from './components/StartMenu';\nimport QuestionDisplay from './components/QuestionDisplay';\nimport { fetchQuestions, nextQuestion, resetSelect, endGame } from './actions';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.nextQuestion = () => {\n      this.props.nextQuestion();\n      const buttons = document.getElementsByTagName('button');\n\n      for (let i = 0; i < buttons.length; i++) {\n        if (buttons[i].classList.contains('choice-correct')) {\n          buttons[i].classList.remove('choice-correct');\n        } else if (buttons[i].classList.contains('choice-incorrect')) {\n          buttons[i].classList.remove('choice-incorrect');\n        }\n      }\n\n      if (this.props.questionIndex < this.props.questions.length - 1) {\n        this.props.resetSelect();\n      } else {\n        this.props.fetchQuestions();\n        this.props.endGame();\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.props.fetchQuestions();\n  } // setting up the next question - if last question has been reached reset the game\n\n\n  // incrementScore = () => {\n  // \tthis.setState({score: this.state.score + 1});\n  // }\n  render() {\n    // const { select, questionIndex, gameOver, score } = this.state;\n    const {\n      questions,\n      start\n    } = this.props;\n    return start ? /*#__PURE__*/_jsxDEV(QuestionDisplay, {\n      next: this.nextQuestion,\n      total: this.props.questions.length\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 12\n    }, this) : /*#__PURE__*/_jsxDEV(StartMenu // score={score}\n    // total={questions.length}\n    // fetch={fetchQuestions}\n    , {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 8\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    questions: state.questionReducer.questions,\n    questionIndex: state.updateState.questionIndex,\n    start: state.updateState.start\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchQuestions,\n  nextQuestion,\n  resetSelect,\n  endGame\n})(App);","map":{"version":3,"sources":["/Users/aschnall/Documents/Portfolio/trivia-redux-edit/src/App.js"],"names":["React","Component","connect","StartMenu","QuestionDisplay","fetchQuestions","nextQuestion","resetSelect","endGame","App","props","buttons","document","getElementsByTagName","i","length","classList","contains","remove","questionIndex","questions","componentDidMount","render","start","mapStateToProps","state","questionReducer","updateState"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,eAAP,MAA4B,8BAA5B;AACA,SAAQC,cAAR,EAAwBC,YAAxB,EAAsCC,WAAtC,EAAmDC,OAAnD,QAAkE,WAAlE;;AAEA,MAAMC,GAAN,SAAkBR,SAAlB,CAA4B;AAAA;AAAA;;AAAA,SAQ3BK,YAR2B,GAQZ,MAAM;AACpB,WAAKI,KAAL,CAAWJ,YAAX;AACA,YAAMK,OAAO,GAAGC,QAAQ,CAACC,oBAAT,CAA8B,QAA9B,CAAhB;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,OAAO,CAACI,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACxC,YAAIH,OAAO,CAACG,CAAD,CAAP,CAAWE,SAAX,CAAqBC,QAArB,CAA8B,gBAA9B,CAAJ,EAAqD;AACpDN,UAAAA,OAAO,CAACG,CAAD,CAAP,CAAWE,SAAX,CAAqBE,MAArB,CAA4B,gBAA5B;AACA,SAFD,MAEO,IAAIP,OAAO,CAACG,CAAD,CAAP,CAAWE,SAAX,CAAqBC,QAArB,CAA8B,kBAA9B,CAAJ,EAAuD;AAC7DN,UAAAA,OAAO,CAACG,CAAD,CAAP,CAAWE,SAAX,CAAqBE,MAArB,CAA4B,kBAA5B;AACA;AACD;;AACD,UAAI,KAAKR,KAAL,CAAWS,aAAX,GAA2B,KAAKT,KAAL,CAAWU,SAAX,CAAqBL,MAArB,GAA8B,CAA7D,EAAgE;AAC/D,aAAKL,KAAL,CAAWH,WAAX;AACA,OAFD,MAEO;AACN,aAAKG,KAAL,CAAWL,cAAX;AACA,aAAKK,KAAL,CAAWF,OAAX;AACA;AACD,KAxB0B;AAAA;;AAE3Ba,EAAAA,iBAAiB,GAAG;AACnB,SAAKX,KAAL,CAAWL,cAAX;AACD,GAJ2B,CAO3B;;;AAmBA;AACA;AACA;AAEAiB,EAAAA,MAAM,GAAG;AACR;AACA,UAAM;AAAEF,MAAAA,SAAF;AAAaG,MAAAA;AAAb,QAAuB,KAAKb,KAAlC;AACA,WACCa,KAAK,gBAAG,QAAC,eAAD;AAAiB,MAAA,IAAI,EAAE,KAAKjB,YAA5B;AAA0C,MAAA,KAAK,EAAE,KAAKI,KAAL,CAAWU,SAAX,CAAqBL;AAAtE;AAAA;AAAA;AAAA;AAAA,YAAH,gBACD,QAAC,SAAD,CACC;AACA;AACA;AAHD;AAAA;AAAA;AAAA;AAAA,YAFL;AAQA;;AAzC0B;;AA4C5B,MAAMS,eAAe,GAAGC,KAAK,IAAI;AAChC,SAAO;AACNL,IAAAA,SAAS,EAAEK,KAAK,CAACC,eAAN,CAAsBN,SAD3B;AAEND,IAAAA,aAAa,EAAEM,KAAK,CAACE,WAAN,CAAkBR,aAF3B;AAGNI,IAAAA,KAAK,EAAEE,KAAK,CAACE,WAAN,CAAkBJ;AAHnB,GAAP;AAKA,CAND;;AAQA,eAAerB,OAAO,CAACsB,eAAD,EAAkB;AAACnB,EAAAA,cAAD;AAAiBC,EAAAA,YAAjB;AAA+BC,EAAAA,WAA/B;AAA4CC,EAAAA;AAA5C,CAAlB,CAAP,CAAgFC,GAAhF,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport StartMenu from './components/StartMenu';\nimport QuestionDisplay from './components/QuestionDisplay';\nimport {fetchQuestions, nextQuestion, resetSelect, endGame } from './actions';\n\nclass App extends Component {\n\n\tcomponentDidMount() {\n\t\tthis.props.fetchQuestions();\n}\n\n\n\t// setting up the next question - if last question has been reached reset the game\n\tnextQuestion = () => {\n\t\tthis.props.nextQuestion();\n\t\tconst buttons = document.getElementsByTagName('button');\n\t\tfor (let i = 0; i < buttons.length; i++) {\n\t\t\tif (buttons[i].classList.contains('choice-correct')) {\n\t\t\t\tbuttons[i].classList.remove('choice-correct')\n\t\t\t} else if (buttons[i].classList.contains('choice-incorrect')) {\n\t\t\t\tbuttons[i].classList.remove('choice-incorrect')\n\t\t\t}\n\t\t}\n\t\tif (this.props.questionIndex < this.props.questions.length - 1) {\n\t\t\tthis.props.resetSelect();\n\t\t} else {\n\t\t\tthis.props.fetchQuestions();\n\t\t\tthis.props.endGame();\n\t\t}\n\t}\n\n\t// incrementScore = () => {\n\t// \tthis.setState({score: this.state.score + 1});\n\t// }\n\n\trender() {\n\t\t// const { select, questionIndex, gameOver, score } = this.state;\n\t\tconst { questions, start } = this.props;\n\t\treturn (\n\t\t\tstart ? <QuestionDisplay next={this.nextQuestion} total={this.props.questions.length} /> : \n\t\t\t\t\t\t\t<StartMenu \n\t\t\t\t\t\t\t\t// score={score}\n\t\t\t\t\t\t\t\t// total={questions.length}\n\t\t\t\t\t\t\t\t// fetch={fetchQuestions}\n\t\t\t\t\t\t\t/>\n\t\t);\n\t}\n}\n\nconst mapStateToProps = state => {\n\treturn { \n\t\tquestions: state.questionReducer.questions,\n\t\tquestionIndex: state.updateState.questionIndex,\n\t\tstart: state.updateState.start \n\t}\n}\n\nexport default connect(mapStateToProps, {fetchQuestions, nextQuestion, resetSelect, endGame })(App);\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}