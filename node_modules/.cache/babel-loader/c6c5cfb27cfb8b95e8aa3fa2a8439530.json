{"ast":null,"code":"// import React, {useRef} from 'react';\n// import NextQuestion from './NextQuestion';\n// import './QuestionDisplay.css';\n// const QuestionDisplay = ({questionDetails, next, select, onCorrect, questionIndex, length}) => {\n// \tconst refs = useRef([]);\n// \t//looping through answer choices and checking them against the user's selected choice\n// \tconst checkAnswer = event => {\n// \t\tfor (let i = 0; i < refs.current.length; i++) {\n// \t\t\tif (event.target.textContent === questionDetails.incorrect_answers[i]) {\n// \t\t\t\trefs.current[i].setAttribute(\"style\", \"background-color: red\");\n// \t\t\t}\n// \t\t\telse if (event.target.textContent === questionDetails.correct_answer) {\n// \t\t\t\trefs.current[i].setAttribute(\"style\", \"background-color: greem\");\n// \t\t\t\tonCorrect();\n// \t\t\t}\n// \t\t}\n// \t\t\tonAnswerSelect(true);\n// \t\t\tif (display.questionChoices[i].isCorrect === true) {\n// \t\t\t\trefs.current[i].setAttribute(\"style\", \"background-color: green\");\n// \t\t\t}\n// \t\t}\n// \t}\n// \tconst prevent = event => {\n// \t\tevent.preventDefault();\n// \t}\n// \tconst choices = () => {\n// \t\tconst answerChoices = [...questionDetails.incorrect_answers];\n// \t\tdisplay.questionChoices.map((choice, index) => {\n// \t\treturn (\n// \t\t\t<button \n// \t\t\t\tclassName=\"choice\"\n// \t\t\t\tkey={index}\n// \t\t\t\tref={el => refs.current.push(el)} \n// \t\t\t\tonClick={select ? prevent : checkAnswer}>{choice.answerText}\n// \t\t\t</button>\n// \t\t);\n// \t})\n// \treturn (\n// \t\t<div className=\"container\">\n// \t\t\t<div className=\"question-display\">\n// \t\t\t\t<div className=\"question-text\">\n// \t\t\t\t\t<h1>{display.questionText}</h1>\n// \t\t\t\t</div>\n// \t\t\t\t<div className=\"choice-wrapper\">\n// \t\t\t\t\t{choices}\n// \t\t\t\t</div>\n// \t\t\t</div>\n// \t\t\t<div className=\"next\">\n// \t\t\t\t{select ? <NextQuestion next={next} questionNumber={questionNumber} length={length-1} /> : ''}\n// \t\t\t</div>\n// \t\t</div>\n// \t);\n// }\n// export default QuestionDisplay;","map":{"version":3,"sources":["/Users/aschnall/Documents/Portfolio/trivia/src/components/QuestionDisplay.js"],"names":[],"mappings":"AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["// import React, {useRef} from 'react';\n// import NextQuestion from './NextQuestion';\n// import './QuestionDisplay.css';\n\n// const QuestionDisplay = ({questionDetails, next, select, onCorrect, questionIndex, length}) => {\n// \tconst refs = useRef([]);\n\n// \t//looping through answer choices and checking them against the user's selected choice\n// \tconst checkAnswer = event => {\n// \t\tfor (let i = 0; i < refs.current.length; i++) {\n// \t\t\tif (event.target.textContent === questionDetails.incorrect_answers[i]) {\n// \t\t\t\trefs.current[i].setAttribute(\"style\", \"background-color: red\");\n// \t\t\t}\n// \t\t\telse if (event.target.textContent === questionDetails.correct_answer) {\n// \t\t\t\trefs.current[i].setAttribute(\"style\", \"background-color: greem\");\n// \t\t\t\tonCorrect();\n// \t\t\t}\n// \t\t}\n// \t\t\tonAnswerSelect(true);\n// \t\t\tif (display.questionChoices[i].isCorrect === true) {\n// \t\t\t\trefs.current[i].setAttribute(\"style\", \"background-color: green\");\n// \t\t\t}\n// \t\t}\n// \t}\n\n// \tconst prevent = event => {\n// \t\tevent.preventDefault();\n// \t}\n\n// \tconst choices = () => {\n// \t\tconst answerChoices = [...questionDetails.incorrect_answers];\n\n\t\t\n// \t\tdisplay.questionChoices.map((choice, index) => {\n// \t\treturn (\n// \t\t\t<button \n// \t\t\t\tclassName=\"choice\"\n// \t\t\t\tkey={index}\n// \t\t\t\tref={el => refs.current.push(el)} \n// \t\t\t\tonClick={select ? prevent : checkAnswer}>{choice.answerText}\n// \t\t\t</button>\n// \t\t);\n// \t})\n\n\n// \treturn (\n// \t\t<div className=\"container\">\n// \t\t\t<div className=\"question-display\">\n// \t\t\t\t<div className=\"question-text\">\n// \t\t\t\t\t<h1>{display.questionText}</h1>\n// \t\t\t\t</div>\n// \t\t\t\t<div className=\"choice-wrapper\">\n// \t\t\t\t\t{choices}\n// \t\t\t\t</div>\n// \t\t\t</div>\n// \t\t\t<div className=\"next\">\n// \t\t\t\t{select ? <NextQuestion next={next} questionNumber={questionNumber} length={length-1} /> : ''}\n// \t\t\t</div>\n// \t\t</div>\n// \t);\n// }\n\n// export default QuestionDisplay;\n\n\n"]},"metadata":{},"sourceType":"module"}