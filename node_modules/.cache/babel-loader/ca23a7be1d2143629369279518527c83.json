{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/aschnall/Documents/Portfolio/sports-trivia/src/components/QuestionDisplay.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef } from 'react';\n\nconst QuestionDisplay = ({\n  display\n}) => {\n  _s();\n\n  let refs = useRef([]);\n  refs.current = display.questionChoices.map((ref, index) => {\n    refs.current[index] = /*#__PURE__*/React.createRef();\n  });\n\n  const checkAnswer = (event, index) => {\n    for (let i = 0; i < display.questionChoices.length; i++) {\n      if (event.target.textContent === display.questionChoices[i].answerText) {\n        if (display.questionChoices[i].isCorrect === false) {\n          console.log('you are wrong!');\n          console.log(refs.current[index]);\n        } else {\n          console.log('you are right!');\n        }\n      }\n    }\n  }; // const test = () => {\n  // \tconsole.log(ref.current);\n  // }\n\n\n  const choices = display.questionChoices.map((choice, index) => {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      ref: refs.current[index],\n      onClick: checkAnswer,\n      children: choice.answerText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 11\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: display.questionText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: choices\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 3\n  }, this);\n};\n\n_s(QuestionDisplay, \"78a5ZvbznFIFfo3Z5YuaFsj29P0=\");\n\n_c = QuestionDisplay;\nexport default QuestionDisplay; // <button ref={ref} onClick={test}>{display.questionChoices[0].answerText}</button>\n// <button ref={ref} onClick={test}>{display.questionChoices[1].answerText}</button>\n// <button onClick={checkAnswer}>{display.questionChoices[2].answerText}</button>\n// <button onClick={checkAnswer}>{display.questionChoices[3].answerText}</button>\n\nvar _c;\n\n$RefreshReg$(_c, \"QuestionDisplay\");","map":{"version":3,"sources":["/Users/aschnall/Documents/Portfolio/sports-trivia/src/components/QuestionDisplay.js"],"names":["React","useRef","QuestionDisplay","display","refs","current","questionChoices","map","ref","index","createRef","checkAnswer","event","i","length","target","textContent","answerText","isCorrect","console","log","choices","choice","questionText"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,MAAf,QAA4B,OAA5B;;AAEA,MAAMC,eAAe,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAe;AAAA;;AAEtC,MAAIC,IAAI,GAAGH,MAAM,CAAC,EAAD,CAAjB;AACAG,EAAAA,IAAI,CAACC,OAAL,GAAeF,OAAO,CAACG,eAAR,CAAwBC,GAAxB,CAA4B,CAACC,GAAD,EAAMC,KAAN,KAAgB;AAC1DL,IAAAA,IAAI,CAACC,OAAL,CAAaI,KAAb,iBAAsBT,KAAK,CAACU,SAAN,EAAtB;AACA,GAFc,CAAf;;AAIA,QAAMC,WAAW,GAAG,CAACC,KAAD,EAAQH,KAAR,KAAkB;AACrC,SAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,OAAO,CAACG,eAAR,CAAwBQ,MAA5C,EAAoDD,CAAC,EAArD,EAAyD;AACxD,UAAID,KAAK,CAACG,MAAN,CAAaC,WAAb,KAA6Bb,OAAO,CAACG,eAAR,CAAwBO,CAAxB,EAA2BI,UAA5D,EAAwE;AACvE,YAAId,OAAO,CAACG,eAAR,CAAwBO,CAAxB,EAA2BK,SAA3B,KAAyC,KAA7C,EAAoD;AACnDC,UAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACAD,UAAAA,OAAO,CAACC,GAAR,CAAYhB,IAAI,CAACC,OAAL,CAAaI,KAAb,CAAZ;AACA,SAHD,MAIK;AACJU,UAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACA;AACD;AACD;AACD,GAZD,CAPsC,CAqBtC;AACA;AACA;;;AAEA,QAAMC,OAAO,GAAGlB,OAAO,CAACG,eAAR,CAAwBC,GAAxB,CAA4B,CAACe,MAAD,EAASb,KAAT,KAAmB;AAC7D,wBAAO;AAAQ,MAAA,GAAG,EAAEL,IAAI,CAACC,OAAL,CAAaI,KAAb,CAAb;AAAkC,MAAA,OAAO,EAAEE,WAA3C;AAAA,gBAAyDW,MAAM,CAACL;AAAhE;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,GAFe,CAAhB;AAIA,sBACC;AAAA,4BACC;AAAA,gBAAKd,OAAO,CAACoB;AAAb;AAAA;AAAA;AAAA;AAAA,YADD,eAEC;AAAA,gBACEF;AADF;AAAA;AAAA;AAAA;AAAA,YAFD;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AAQA,CArCD;;GAAMnB,e;;KAAAA,e;AAuCN,eAAeA,eAAf,C,CAGI;AACA;AACA;AACA","sourcesContent":["import React, {useRef} from 'react';\n\nconst QuestionDisplay = ({display}) => {\n\n\tlet refs = useRef([]);\n\trefs.current = display.questionChoices.map((ref, index) => {\n\t\trefs.current[index] = React.createRef();\n\t})\n\t\n\tconst checkAnswer = (event, index) => {\n\t\tfor (let i = 0; i < display.questionChoices.length; i++) {\n\t\t\tif (event.target.textContent === display.questionChoices[i].answerText) {\n\t\t\t\tif (display.questionChoices[i].isCorrect === false) {\n\t\t\t\t\tconsole.log('you are wrong!');\n\t\t\t\t\tconsole.log(refs.current[index]);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tconsole.log('you are right!');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// const test = () => {\n\t// \tconsole.log(ref.current);\n\t// }\n\n\tconst choices = display.questionChoices.map((choice, index) => {\n\t\t\treturn <button ref={refs.current[index]} onClick={checkAnswer}>{choice.answerText}</button>;\n\t})\n\n\treturn (\n\t\t<div>\n\t\t\t<h1>{display.questionText}</h1>\n\t\t\t<div>\n\t\t\t\t{choices}\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default QuestionDisplay;\n\n\n\t\t\t\t// <button ref={ref} onClick={test}>{display.questionChoices[0].answerText}</button>\n\t\t\t\t// <button ref={ref} onClick={test}>{display.questionChoices[1].answerText}</button>\n\t\t\t\t// <button onClick={checkAnswer}>{display.questionChoices[2].answerText}</button>\n\t\t\t\t// <button onClick={checkAnswer}>{display.questionChoices[3].answerText}</button>\n"]},"metadata":{},"sourceType":"module"}