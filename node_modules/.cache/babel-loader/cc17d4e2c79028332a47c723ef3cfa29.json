{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/aschnall/Documents/Portfolio/trivia/src/App.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport StartMenu from './components/StartMenu';\nimport QuestionDisplay from './components/QuestionDisplay';\nimport { fetchQuestions } from './actions';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      start: false,\n      select: false,\n      questionIndex: 0,\n      gameOver: true,\n      score: 0\n    };\n\n    this.startGame = () => {\n      this.props.fetchQuestions();\n      this.setState({\n        start: true\n      });\n    };\n\n    this.onAnswerSelect = () => {\n      this.setState({\n        select: true\n      });\n    };\n\n    this.nextQuestion = () => {\n      this.setState({\n        questionIndex: this.state.questionIndex + 1\n      });\n      const buttons = document.getElementsByTagName('button');\n\n      for (let i = 0; i < buttons.length; i++) {\n        buttons[i].removeAttribute('style');\n      }\n\n      if (this.state.questionIndex < this.props.questions.length - 1) {\n        this.setState({\n          select: false\n        });\n      } else {\n        this.setState({\n          gameOver: true,\n          start: false,\n          select: false,\n          questionIndex: 0\n        });\n      }\n    };\n\n    this.incrementScore = () => {\n      this.setState({\n        score: this.state.score + 1\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      gameOver: false\n    });\n  }\n\n  componentDidUpdate(prevState) {\n    if (this.state.gameOver !== prevState.gameOver) this.props.fetchQuestions();\n  }\n\n  render() {\n    const {\n      select,\n      start,\n      questionIndex,\n      gameOver,\n      score\n    } = this.state;\n    const {\n      questions\n    } = this.props;\n    return start ? /*#__PURE__*/_jsxDEV(QuestionDisplay, {\n      questions: questions,\n      next: this.nextQuestion,\n      select: select,\n      onCorrect: this.incrementScore,\n      questionIndex: questionIndex,\n      length: questions.length,\n      onAnswerSelect: this.onAnswerSelect\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 12\n    }, this) : /*#__PURE__*/_jsxDEV(StartMenu, {\n      gameOver: gameOver,\n      score: score,\n      total: questions.length,\n      fetch: fetchQuestions,\n      startGame: this.startGame\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 8\n    }, this);\n  }\n\n}\n\n;\n\nconst mapStateToProps = state => {\n  return {\n    questions: state.questionReducer\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchQuestions\n})(App);","map":{"version":3,"sources":["/Users/aschnall/Documents/Portfolio/trivia/src/App.js"],"names":["React","Component","connect","StartMenu","QuestionDisplay","fetchQuestions","App","state","start","select","questionIndex","gameOver","score","startGame","props","setState","onAnswerSelect","nextQuestion","buttons","document","getElementsByTagName","i","length","removeAttribute","questions","incrementScore","componentDidMount","componentDidUpdate","prevState","render","mapStateToProps","questionReducer"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport StartMenu from './components/StartMenu';\nimport QuestionDisplay from './components/QuestionDisplay';\nimport {fetchQuestions } from './actions';\n\nclass App extends Component {\n\t// const [start, setStart] = useState(false);\n\t// const [select, setSelect] = useState(false);\n\t// const [questionNumber, setQuestionNumber] = useState(0);\n\t// const [question, setQuestion] = useState(questions[questionNumber]);\n\t// const [gameOver, setGameOver] = useState(false);\n\t// const [score, setScore] = useState(0);\n\n\tstate = {\n\t\tstart: false,\n\t\tselect: false,\n\t\tquestionIndex: 0,\n\t\tgameOver: true,\n\t\tscore: 0\n\t};\n\n\tcomponentDidMount() {\n\t\tthis.setState({gameOver: false});\n\t}\n\n\tcomponentDidUpdate(prevState) {\n\t\tif(this.state.gameOver !== prevState.gameOver)\n\t\tthis.props.fetchQuestions();\n\t}\n\n\tstartGame = () => {\n\t\tthis.props.fetchQuestions();\n\t\tthis.setState({start: true});\n\t}\n\n\tonAnswerSelect = () => {\n\t\tthis.setState({select: true})\n\t}\n\n\t// setting up the next question - if last quetsion has been reached reset the game\n\tnextQuestion = () => {\n\t\tthis.setState({questionIndex: this.state.questionIndex + 1});\n\t\tconst buttons = document.getElementsByTagName('button');\n\t\tfor (let i = 0; i < buttons.length; i++) {\n\t\t\tbuttons[i].removeAttribute('style');\n\t\t}\n\t\tif (this.state.questionIndex < this.props.questions.length - 1) {\n\t\t\tthis.setState({select: false});\n\t\t} else {\n\t\t\tthis.setState({\n\t\t\t\tgameOver: true,\n\t\t\t\tstart: false,\n\t\t\t\tselect: false,\n\t\t\t\tquestionIndex: 0,\n\t\t\t})\n\t\t}\n\t}\n\n\tincrementScore = () => {\n\t\tthis.setState({score: this.state.score + 1});\n\t}\n\n\trender() {\n\t\tconst { select, start, questionIndex, gameOver, score } = this.state;\n\t\tconst { questions } = this.props;\n\t\treturn (\n\t\t\tstart ? <QuestionDisplay \n\t\t\t\t\t\t\t\tquestions={questions}\n\t\t\t\t\t\t\t\tnext={this.nextQuestion} \n\t\t\t\t\t\t\t\tselect={select} \n\t\t\t\t\t\t\t\tonCorrect={this.incrementScore}\n\t\t\t\t\t\t\t\tquestionIndex={questionIndex}\n\t\t\t\t\t\t\t\tlength={questions.length}\n\t\t\t\t\t\t\t\tonAnswerSelect={this.onAnswerSelect}\n\t\t\t\t\t\t\t/> : \n\t\t\t\t\t\t\t<StartMenu \n\t\t\t\t\t\t\t\tgameOver={gameOver} \n\t\t\t\t\t\t\t\tscore={score}\n\t\t\t\t\t\t\t\ttotal={questions.length}\n\t\t\t\t\t\t\t\tfetch={fetchQuestions}\n\t\t\t\t\t\t\t\tstartGame={this.startGame}\n\t\t\t\t\t\t\t/>\n\t\t);\n\t}\n};\n\nconst mapStateToProps = state => {\n\treturn { questions: state.questionReducer }\n}\n\nexport default connect(mapStateToProps, {fetchQuestions})(App);\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}