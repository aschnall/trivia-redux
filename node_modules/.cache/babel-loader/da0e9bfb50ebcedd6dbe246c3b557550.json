{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/aschnall/Documents/Portfolio/trivia-redux-edit/src/components/NextQuestion.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { nextQuestion, endGame, onChoiceSelect, fetchQuestions } from '../actions';\n\nconst NextQuestion = props => {\n  _s();\n\n  const onNextClick = () => {\n    const buttons = document.getElementsByTagName('button');\n\n    for (let i = 0; i < buttons.length; i++) {\n      if (buttons[i].classList.contains('choice-correct')) {\n        buttons[i].classList.remove('choice-correct');\n      } else if (buttons[i].classList.contains('choice-incorrect')) {\n        buttons[i].classList.remove('choice-incorrect');\n      }\n    }\n\n    if (props.questionIndex < props.questions.length - 1) {\n      props.nextQuestion();\n      props.onChoiceSelect();\n      console.log(props.questionIndex);\n    } else {\n      props.fetchQuestions();\n      props.endGame();\n    }\n  };\n\n  useEffect(() => {\n    if (props.questionIndex < props.questions.length - 1) {\n      props.nextQuestion();\n    } else {\n      props.fetchQuestions();\n      props.endGame();\n    }\n  }, [select]); //display the next button after user selects an answer\n  //if on last question, button will display with text of 'finish' rather than 'next question'\n\n  return props.questionIndex === props.questions.length ? /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: onNextClick,\n    children: \"Finish\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 4\n  }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: onNextClick,\n    children: \"Next Question\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 4\n  }, this);\n};\n\n_s(NextQuestion, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = NextQuestion;\n\nconst mapStateToProps = state => {\n  return {\n    questionIndex: state.questionIndexReducer.questionIndex,\n    questions: state.questionReducer.questions,\n    select: state.selectReducer.select\n  };\n};\n\nexport default connect(mapStateToProps, {\n  nextQuestion,\n  onChoiceSelect,\n  endGame,\n  fetchQuestions\n})(NextQuestion);\n\nvar _c;\n\n$RefreshReg$(_c, \"NextQuestion\");","map":{"version":3,"sources":["/Users/aschnall/Documents/Portfolio/trivia-redux-edit/src/components/NextQuestion.js"],"names":["React","Component","connect","nextQuestion","endGame","onChoiceSelect","fetchQuestions","NextQuestion","props","onNextClick","buttons","document","getElementsByTagName","i","length","classList","contains","remove","questionIndex","questions","console","log","useEffect","select","mapStateToProps","state","questionIndexReducer","questionReducer","selectReducer"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,SAASC,YAAT,EAAuBC,OAAvB,EAAgCC,cAAhC,EAAgDC,cAAhD,QAAsE,YAAtE;;AAGA,MAAMC,YAAY,GAAGC,KAAK,IAAI;AAAA;;AAE7B,QAAMC,WAAW,GAAG,MAAM;AACzB,UAAMC,OAAO,GAAGC,QAAQ,CAACC,oBAAT,CAA8B,QAA9B,CAAhB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,OAAO,CAACI,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACxC,UAAIH,OAAO,CAACG,CAAD,CAAP,CAAWE,SAAX,CAAqBC,QAArB,CAA8B,gBAA9B,CAAJ,EAAqD;AACpDN,QAAAA,OAAO,CAACG,CAAD,CAAP,CAAWE,SAAX,CAAqBE,MAArB,CAA4B,gBAA5B;AACA,OAFD,MAEO,IAAIP,OAAO,CAACG,CAAD,CAAP,CAAWE,SAAX,CAAqBC,QAArB,CAA8B,kBAA9B,CAAJ,EAAuD;AAC7DN,QAAAA,OAAO,CAACG,CAAD,CAAP,CAAWE,SAAX,CAAqBE,MAArB,CAA4B,kBAA5B;AACA;AACD;;AACD,QAAIT,KAAK,CAACU,aAAN,GAAsBV,KAAK,CAACW,SAAN,CAAgBL,MAAhB,GAAyB,CAAnD,EAAsD;AACrDN,MAAAA,KAAK,CAACL,YAAN;AACAK,MAAAA,KAAK,CAACH,cAAN;AACAe,MAAAA,OAAO,CAACC,GAAR,CAAYb,KAAK,CAACU,aAAlB;AACA,KAJD,MAIO;AACNV,MAAAA,KAAK,CAACF,cAAN;AACAE,MAAAA,KAAK,CAACJ,OAAN;AACA;AACD,GAjBD;;AAmBAkB,EAAAA,SAAS,CAAC,MAAM;AACf,QAAId,KAAK,CAACU,aAAN,GAAsBV,KAAK,CAACW,SAAN,CAAgBL,MAAhB,GAAyB,CAAnD,EAAsD;AACrDN,MAAAA,KAAK,CAACL,YAAN;AACA,KAFD,MAEO;AACNK,MAAAA,KAAK,CAACF,cAAN;AACAE,MAAAA,KAAK,CAACJ,OAAN;AACA;AACD,GAPQ,EAON,CAACmB,MAAD,CAPM,CAAT,CArB6B,CA8B7B;AACA;;AACA,SACCf,KAAK,CAACU,aAAN,KAAwBV,KAAK,CAACW,SAAN,CAAgBL,MAAxC,gBACC;AAAQ,IAAA,OAAO,EAAEL,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADD,gBAEC;AAAQ,IAAA,OAAO,EAAEA,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAHF;AAQA,CAxCD;;GAAMF,Y;;KAAAA,Y;;AA0CN,MAAMiB,eAAe,GAAGC,KAAK,IAAI;AAChC,SAAO;AACNP,IAAAA,aAAa,EAAEO,KAAK,CAACC,oBAAN,CAA2BR,aADpC;AAENC,IAAAA,SAAS,EAAEM,KAAK,CAACE,eAAN,CAAsBR,SAF3B;AAGNI,IAAAA,MAAM,EAAEE,KAAK,CAACG,aAAN,CAAoBL;AAHtB,GAAP;AAKA,CAND;;AAQA,eAAerB,OAAO,CAACsB,eAAD,EAAkB;AAAErB,EAAAA,YAAF;AAAgBE,EAAAA,cAAhB;AAAgCD,EAAAA,OAAhC;AAAyCE,EAAAA;AAAzC,CAAlB,CAAP,CAAoFC,YAApF,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport { nextQuestion, endGame, onChoiceSelect, fetchQuestions } from '../actions';\n\n\nconst NextQuestion = props => {\n\n\tconst onNextClick = () => {\n\t\tconst buttons = document.getElementsByTagName('button');\n\t\tfor (let i = 0; i < buttons.length; i++) {\n\t\t\tif (buttons[i].classList.contains('choice-correct')) {\n\t\t\t\tbuttons[i].classList.remove('choice-correct')\n\t\t\t} else if (buttons[i].classList.contains('choice-incorrect')) {\n\t\t\t\tbuttons[i].classList.remove('choice-incorrect')\n\t\t\t}\n\t\t}\n\t\tif (props.questionIndex < props.questions.length - 1) {\n\t\t\tprops.nextQuestion();\n\t\t\tprops.onChoiceSelect();\n\t\t\tconsole.log(props.questionIndex);\n\t\t} else {\n\t\t\tprops.fetchQuestions();\n\t\t\tprops.endGame();\n\t\t}\n\t}\n\n\tuseEffect(() => {\n\t\tif (props.questionIndex < props.questions.length - 1) {\n\t\t\tprops.nextQuestion();\n\t\t} else {\n\t\t\tprops.fetchQuestions();\n\t\t\tprops.endGame();\n\t\t}\n\t}, [select])\n\n\t//display the next button after user selects an answer\n\t//if on last question, button will display with text of 'finish' rather than 'next question'\n\treturn (\n\t\tprops.questionIndex === props.questions.length ? \n\t\t\t<button onClick={onNextClick}>Finish</button> :\n\t\t\t<button onClick={onNextClick} >\n\t\t\t\tNext Question\n\t\t\t</button> \n\n\t);\n}\n\nconst mapStateToProps = state => {\n\treturn {\n\t\tquestionIndex: state.questionIndexReducer.questionIndex,\n\t\tquestions: state.questionReducer.questions,\n\t\tselect: state.selectReducer.select\n\t}\n}\n\nexport default connect(mapStateToProps, { nextQuestion, onChoiceSelect, endGame, fetchQuestions })(NextQuestion);\n\n\n"]},"metadata":{},"sourceType":"module"}